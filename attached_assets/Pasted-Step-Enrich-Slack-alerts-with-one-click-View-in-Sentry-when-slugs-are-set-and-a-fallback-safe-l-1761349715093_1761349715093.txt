Step: Enrich Slack alerts with one-click “View in Sentry” (when slugs are set) and a fallback-safe layout. (Layer: Velocity → Alerts Core)

Why it matters: When an alarm fires, you shouldn’t hunt for clues—jump straight from Slack to the exact error/trace view for that route.

Inputs needed:

lib/alerts.js

Env (already optional): SENTRY_ORG_SLUG, SENTRY_PROJECT_SLUG, SENTRY_ENV

Command:

Patch lib/alerts.js to add Sentry deep links to Slack blocks, with graceful fallback if secrets are missing.

--- a/lib/alerts.js
+++ b/lib/alerts.js
@@
-function makeAlerter({ metrics, fetchImpl, webhookUrl, env = "dev" }) {
+function makeAlerter({ metrics, fetchImpl, webhookUrl, env = "dev" }) {
   const sent = new Map(); // key -> lastSentTs
+  const SENTRY_ORG = process.env.SENTRY_ORG_SLUG || "";
+  const SENTRY_PROJ = process.env.SENTRY_PROJECT_SLUG || "";
+  const SENTRY_ENV = process.env.SENTRY_ENV || env;
 
@@
-  function alarmToBlocks(a) {
+  function sentryUrlForRoute(route) {
+    if (!SENTRY_ORG || !SENTRY_PROJ) return null;
+    const q = encodeURIComponent(`event.type:error environment:${SENTRY_ENV} route:"${route}"`);
+    const name = encodeURIComponent(`Velocity: ${route}`);
+    return `https://sentry.io/organizations/${SENTRY_ORG}/discover/results/?name=${name}&field=timestamp&field=message&field=release&field=trace&field=transaction&query=${q}&project=${SENTRY_PROJ}&statsPeriod=1h`;
+  }
+
+  function alarmToBlocks(a) {
     const color = a.severity === "critical" ? "#B91C1C" : "#D97706"; // red / amber
     const title = a.kind === "error_rate" ? "High error rate" : a.kind === "p95_regress" ? "p95 regression" : "SLO violation";
     const details = a.kind === "error_rate"
       ? `err% (1m): *${a.evidence.err_rate_1m}%* — samples(1m): *${a.evidence.samples_1m}*`
       : a.kind === "p95_regress"
         ? `p95: *${a.evidence.p95_prev3_ms}ms → ${a.evidence.p95_last3_ms}ms* (+${a.evidence.regress_abs_ms}ms, ${a.evidence.regress_pct}%)`
-        : `targets p95≤${a.evidence.targets.p95_ms}ms err≤${a.evidence.targets.err_pct}% • actual p95=${a.evidence.actual.p95_ms ?? "—"}ms, err=${a.evidence.actual.err_pct ?? "—"}%`;
+        : `targets p95≤${a.evidence.targets.p95_ms}ms err≤${a.evidence.targets.err_pct}% • actual p95=${a.evidence.actual.p95_ms ?? "—"}ms, err=${a.evidence.actual.err_pct ?? "—"}%`;
+    const sentryUrl = sentryUrlForRoute(a.route);
 
     return [
       { type: "section", text: { type: "mrkdwn", text: `*${title}* — \`${a.route}\` (${a.severity.toUpperCase()})` } },
       { type: "context", elements: [{ type: "mrkdwn", text: `Env: *${env}* • ${a.since}` }] },
       { type: "section", text: { type: "mrkdwn", text: details } },
+      ...(sentryUrl ? [{
+        type: "actions",
+        elements: [
+          { type: "button", text: { type: "plain_text", text: "View in Sentry →" }, url: sentryUrl, style: "danger" }
+        ]
+      }] : []),
       { type: "divider" },
     ];
   }
@@
   async function tick() {
@@
-    if (!fresh.length) return;
+    if (!fresh.length) return;
 
     // Batch into one Slack message (n blocks)
     const blocks = fresh.flatMap(alarmToBlocks);
-    await postSlack(blocks);
+    await postSlack(blocks);
   }


Success check:

Ensure an alarm fires (e.g., return a few 5xx or add delay for p95 regression).

With SENTRY_ORG_SLUG and SENTRY_PROJECT_SLUG set:

Slack message includes a “View in Sentry →” button under each alarm block.

Button opens Sentry Discover filtered to environment=<env> and route:"METHOD /path" for the last 1h.

Without those secrets:

Slack message still posts (no button shown). No errors in logs.

Next: wait for user.