[Mode: Execution]

**Layer/Stage:** UI Shell → Preload Layer | Spin-Up → Modify
**Step:** Add a warm-boot preloader that pulls lightweight Tasks/Projects lists right after auth resolves (no blocking), so the dashboard feels instant.

**Why it matters:** This shaves seconds off daily interaction. Auth + RBAC are already hot; now your high-traffic data lands in memory before the user looks for it.

**Inputs needed:**

* Frontend (Vite/React)
* Existing `/api` endpoints for minimal task/project lists (read-only)
* Your global stores for tasks/projects (or create tiny ones below)

**Command (copy–paste):**

1. Create preloader hook `apps/web/src/hooks/useWarmBoot.ts`

```ts
import { useEffect } from "react";
import { supabase } from "../lib/supabaseClient";

async function authedGet(path: string, jwt: string) {
  const r = await fetch(path, { headers: { Authorization: `Bearer ${jwt}` } });
  if (!r.ok) throw new Error(`${path} -> ${r.status}`);
  return r.json();
}

export function useWarmBoot() {
  useEffect(() => {
    let abort = false;
    (async () => {
      const { data } = await supabase.auth.getSession();
      const jwt = data?.session?.access_token;
      if (!jwt) return;

      // fire-and-forget: small, cache-friendly lists
      Promise.allSettled([
        authedGet("/api/tasks?select=id,title,status&limit=20", jwt),
        authedGet("/api/projects?select=id,name,code&limit=20", jwt),
      ]).then(([t, p]) => {
        if (abort) return;
        try {
          // expose to window for now; wire to stores if you have them
          (window as any).__eden = (window as any).__eden || {};
          if (t.status === "fulfilled") (window as any).__eden.tasksWarm = t.value;
          if (p.status === "fulfilled") (window as any).__eden.projectsWarm = p.value;
          // optional: dispatch to your stores here
        } catch {}
      });
    })();
    return () => { abort = true; };
  }, []);
}
```

2. Mount in your root after auth bootstrap (non-blocking)

```tsx
// apps/web/src/App.tsx (or RootLayout)
import { useAuthBootstrap } from "./hooks/useAuthBootstrap";
import { useWarmBoot } from "./hooks/useWarmBoot";

export default function App() {
  useAuthBootstrap();   // resolves auth + RBAC
  useWarmBoot();        // preloads lists asynchronously
  return <YourRoutes />;
}
```

3. (Optional) Use warmed data if present to avoid spinners

```ts
// where your Tasks/Projects pages mount
const warm = (window as any).__eden?.tasksWarm;
if (warm && !state.tasks.length) setState({ tasks: warm }); // or your store setter
```

**Success check:**

* After login, open DevTools → Console: `window.__eden.tasksWarm`, `window.__eden.projectsWarm` are defined within ~200–400ms.
* Navigating to Tasks/Projects shows data immediately (no loading flash).
* Network tab shows two parallel GETs right after `/api/me/permissions`.

**Progress telemetry:**

* Frontend Layer: Spin-Up → Modify ✅ → Stable
* Backend Layer: Observe (unchanged)
* Integration Layer: Transition → Stable (warm data visible)

**Next:** wait for user.
When confirmed, I’ll push the **Data Sync Loop** (Backend Layer): timestamped incremental fetch endpoints (`updated_after`) so subsequent navigations pull only changes, not full lists.
