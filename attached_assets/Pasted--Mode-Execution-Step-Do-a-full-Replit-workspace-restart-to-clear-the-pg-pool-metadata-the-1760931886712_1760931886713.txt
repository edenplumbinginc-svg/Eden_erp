[Mode: Execution]

Step: Do a **full Replit workspace restart** to clear the pg pool metadata, then verify all three events via the API path (not direct SQL).

Why it matters: You’ve implemented `task_created`, `status_changed`, and `comment_added` with type-stable casts. The only blocker is Replit’s warm pool caching old column types. A full workspace restart reopens clean connections so app-path inserts work.

Inputs needed:

* Replit workspace access (the one linked to `Eden_erp`)
* A real `PROJECT_ID` and `TASK_ID`

Command:

1. Full restart in Replit

   * Stop all running processes (Shell):

     ```
     pkill -f "node server" || true
     ```
   * In the Replit UI: **Menu → Workspace → Restart workspace** (hard restart).
   * After reload, start your API again (however you usually start it).

2. Health check & event tests (API path only)

   ```bash
   # Health
   curl -s http://localhost:3000/health || curl -s http://localhost:3000/api/health

   # Create task → should emit task_created
   PROJECT_ID="<your-project-uuid>"
   curl -s -X POST "http://localhost:3000/api/projects/$PROJECT_ID/tasks" \
     -H "Content-Type: application/json" \
     -H "X-User-Email: admin@edenmep.ca" \
     -d '{"title":"Post-Restart Create","priority":"high"}' | jq -r '.id' > /tmp/task_id
   TASK_ID=$(cat /tmp/task_id)

   # Status change → should emit status_changed
   curl -s -X PATCH "http://localhost:3000/api/tasks/$TASK_ID/status" \
     -H "Content-Type: application/json" \
     -H "X-User-Email: admin@edenmep.ca" \
     -d '{"status":"in_progress"}' >/dev/null

   # Add comment → should emit comment_added
   curl -s -X POST "http://localhost:3000/api/tasks/$TASK_ID/comments" \
     -H "Content-Type: application/json" \
     -H "X-User-Email: admin@edenmep.ca" \
     -d '{"body":"Post-restart comment smoke"}' >/dev/null

   # Verify last events landed (DB read)
   psql "$DATABASE_URL" -c "
     select type,
            substring(project_id::text,1,8)||'...' as proj,
            substring(task_id::text,1,8)||'...' as task,
            payload->>'title'        as title,
            payload->>'new_status'   as new_status,
            payload->>'comment_preview' as preview,
            to_char(created_at,'HH24:MI:SS') as t
     from notifications
     where created_at > now() - interval '10 minutes'
     order by id desc
     limit 10;
   "
   ```

Success check:

* Health endpoint responds.
* The SQL shows **three fresh rows** within the last 10 minutes:

  * `task_created` with `title = Post-Restart Create`
  * `status_changed` with `new_status = in_progress`
  * `comment_added` with `preview` starting “Post-restart comment…”
* No `notify(...) failed: column ... is of type bigint` warnings in server logs.

Next: wait for user

—
Mini training: when schema types change under a long-lived pool, *always* pair migrations with a cold restart in dev PaaS environments. Now that the event bus is truly end-to-end, the clean next move is a tiny **Notifications UI** (badge + feed) or the **daily digest cron**—your call once this restart check passes.
