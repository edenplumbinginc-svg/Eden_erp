[Mode: Execution]

Step: Add a **Reports** page (status / owner / overdue / recent activity) so you can see live coordination stats and deep-link into tasks.

Why it matters: This gives you visible proof the backbone is working, and a quick way to spot hot items (overdue, stalled, owner load).

Inputs needed:

* Frontend app at `apps/coordination_ui`
* Backend read endpoints live (reports router): `/api/reports/tasks/status`, `/owner`, `/overdue`, `/recent` (adjust prefixes if needed)

Command:

1. Add API helpers

```js
// apps/coordination_ui/src/api.js
export async function reportByStatus() {
  const { data } = await api.get('/reports/tasks/status'); return Array.isArray(data) ? data : [];
}
export async function reportByOwner() {
  const { data } = await api.get('/reports/tasks/owner'); return Array.isArray(data) ? data : [];
}
export async function reportOverdue() {
  const { data } = await api.get('/reports/tasks/overdue'); return Array.isArray(data) ? data : [];
}
export async function reportRecentActivity() {
  const { data } = await api.get('/reports/tasks/recent'); return Array.isArray(data) ? data : [];
}
```

2. Create Reports page

```jsx
// apps/coordination_ui/src/pages/Reports.jsx
import React from "react";
import { useQuery } from "@tanstack/react-query";
import { Link } from "react-router-dom";
import { reportByStatus, reportByOwner, reportOverdue, reportRecentActivity } from "../api";

const Card = ({ title, children }) => (
  <div className="rounded-2xl shadow-sm border bg-white">
    <div className="px-4 py-3 border-b font-semibold">{title}</div>
    <div className="p-4">{children}</div>
  </div>
);

export default function Reports() {
  const { data: byStatus = [] } = useQuery({ queryKey: ["r_status"], queryFn: reportByStatus });
  const { data: byOwner  = [] } = useQuery({ queryKey: ["r_owner"],  queryFn: reportByOwner  });
  const { data: overdue  = [] } = useQuery({ queryKey: ["r_overdue"], queryFn: reportOverdue });
  const { data: recent   = [] } = useQuery({ queryKey: ["r_recent"],  queryFn: reportRecentActivity });

  return (
    <div className="mx-auto max-w-7xl p-4 space-y-6">
      <h1 className="text-xl font-semibold">Coordination Reports</h1>

      <div className="grid md:grid-cols-2 gap-6">
        <Card title="Tasks by Status">
          <table className="w-full text-sm">
            <thead><tr><th className="text-left py-1">Status</th><th className="text-right">Count</th></tr></thead>
            <tbody>{byStatus.map(r => (
              <tr key={r.status}>
                <td className="py-1 capitalize">{r.status}</td>
                <td className="py-1 text-right">{r.count}</td>
              </tr>
            ))}</tbody>
          </table>
        </Card>

        <Card title="Tasks by Owner">
          <table className="w-full text-sm">
            <thead><tr><th className="text-left py-1">Owner</th><th className="text-right">Count</th></tr></thead>
            <tbody>{byOwner.map(r => (
              <tr key={r.owner_id || r.owner_email || Math.random()}>
                <td className="py-1">{r.owner_email || r.owner_name || r.owner_id || "Unassigned"}</td>
                <td className="py-1 text-right">{r.count}</td>
              </tr>
            ))}</tbody>
          </table>
        </Card>

        <Card title="Overdue Tasks">
          {overdue.length === 0 ? <div className="text-sm text-gray-500">No overdue tasks üéâ</div> : (
            <ul className="text-sm space-y-2">
              {overdue.map(t => (
                <li key={t.id} className="flex items-center justify-between">
                  <div>
                    <div className="font-medium">{t.title}</div>
                    <div className="text-xs text-gray-500">
                      Due {t.due_at ? new Date(t.due_at).toLocaleDateString() : "‚Äî"} ‚Ä¢ {t.status}
                    </div>
                  </div>
                  <Link className="px-2 py-1 border rounded text-xs" to={`/task/${t.id}`}>Open</Link>
                </li>
              ))}
            </ul>
          )}
        </Card>

        <Card title="Recent Activity">
          {recent.length === 0 ? <div className="text-sm text-gray-500">No recent activity.</div> : (
            <ul className="text-sm space-y-2">
              {recent.map((e, i) => (
                <li key={i} className="flex items-center justify-between">
                  <div>
                    <div className="font-medium">{e.action}</div>
                    <div className="text-xs text-gray-500">
                      {e.entity} ‚Ä¢ {new Date(e.created_at).toLocaleString()}
                    </div>
                  </div>
                  {e.task_id && <Link className="px-2 py-1 border rounded text-xs" to={`/task/${e.task_id}`}>Open</Link>}
                </li>
              ))}
            </ul>
          )}
        </Card>
      </div>
    </div>
  );
}
```

3. Add route + header link

```jsx
// apps/coordination_ui/src/App.jsx (or router file)
import Reports from "./pages/Reports";
// inside <Routes>‚Ä¶
<Route path="/reports" element={<Reports />} />
```

```jsx
// apps/coordination_ui/src/components/EdenHeader.jsx
// add alongside other nav items:
<a href="/reports" className="text-sm underline">Reports</a>
```

Success check:

* Click **Reports** in the header ‚Üí page loads with four cards.
* Data appears (counts, owners, overdue list, recent activity), and each ‚ÄúOpen‚Äù deep-links to `/task/:id`.
* Viewer role can see the page; write actions elsewhere still RBAC-guarded.

Next: wait for user
