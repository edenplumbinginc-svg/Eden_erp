Step: Implement Velocity → Sentry correlation with graceful fallback (no secrets required to ship). Add backend deep-link endpoint and a “Sentry →” button per route that’s disabled until secrets are set. (Layer: Velocity → Correlation)

Why it matters: You can jump from a bad route directly to its traces/errors in Sentry. If secrets aren’t set yet, the UI clearly shows what’s missing without breaking.

Inputs needed:

Backend server.js

Frontend apps/coordination_ui/src/pages/Velocity.jsx

(Later) Secrets: SENTRY_ORG_SLUG, SENTRY_PROJECT_SLUG, optional SENTRY_ENV

Command:

Backend: add deep-link helper (safe even if secrets missing)

// server.js — Sentry deep link (after other /ops/* routes)
app.get("/ops/sentry-link", (req, res) => {
  const org = process.env.SENTRY_ORG_SLUG || "";
  const project = process.env.SENTRY_PROJECT_SLUG || "";
  const env = process.env.SENTRY_ENV || process.env.NODE_ENV || "dev";
  const route = req.query.route;

  if (!route) return res.status(400).json({ error: "missing route" });
  if (!org || !project) {
    return res.status(200).json({
      url: null,
      missing: {
        SENTRY_ORG_SLUG: !org,
        SENTRY_PROJECT_SLUG: !project,
      },
    });
  }
  const query = encodeURIComponent(`event.type:error environment:${env} route:"${route}"`);
  const name = encodeURIComponent(`Velocity: ${route}`);
  const url =
    `https://sentry.io/organizations/${org}/discover/results/` +
    `?name=${name}&field=timestamp&field=message&field=release&field=trace&field=transaction` +
    `&query=${query}&project=${project}&statsPeriod=1h`;

  res.json({ url });
});


Backend: enrich Sentry tags on every request (harmless if Sentry absent)

// server.js — near Sentry setup and timing middleware
const Sentry = require("@sentry/node");

// tag requests (works even if you’re not throwing)
function routeKey(req) { return `${req.method} ${req.route?.path || req.path}`; }

app.use((req, res, next) => {
  // name active transaction if present
  const tx = Sentry.getCurrentHub().getScope()?.getTransaction?.();
  if (tx) tx.setName(routeKey(req));

  Sentry.setTag("route", req.route?.path || req.path);
  Sentry.setTag("method", req.method);
  if (process.env.RELEASE_SHA) Sentry.setTag("release", process.env.RELEASE_SHA);
  if (process.env.BUILD_TIME) Sentry.setTag("build_time", process.env.BUILD_TIME);

  const start = process.hrtime.bigint();
  res.on("finish", () => {
    const ms = Number(process.hrtime.bigint() - start) / 1e6;
    Sentry.setTag("status_code", res.statusCode);
    Sentry.setTag("duration_ms", Math.round(ms));
    if (res.statusCode >= 500) {
      Sentry.captureMessage("HTTP 5xx response", {
        level: "error",
        tags: { route: req.route?.path || req.path, method: req.method, status_code: res.statusCode, duration_ms: Math.round(ms) },
      });
    }
  });
  next();
});


Frontend: add Sentry action per row with clear “configure secrets” state

// apps/coordination_ui/src/pages/Velocity.jsx
@@
           <thead className="bg-gray-50">
             <tr>
               {header("Route", "route")}
               {header("RPS (1m)", "rps")}
               {header("p50 ms (1m)", "p50_ms")}
               {header("p95 ms (1m)", "p95_ms")}
               {header("Error % (1m)", "err_rate")}
               {header("Samples (1m)", "count")}
               <th className="px-3 py-2">p95 (5m)</th>
               <th className="px-3 py-2">RPS (5m)</th>
               {header("Regress % (p95)", "regress_pct")}
+              <th className="px-3 py-2">Trace</th>
             </tr>
           </thead>
@@
                 <td className="px-3 py-2">
                   {Number.isFinite(r.regress_pct)
                     ? (<span className={`inline-flex items-center gap-1 px-2 py-0.5 rounded-full text-xs
                         ${r.is_regress ? "bg-red-100 text-red-700 border border-red-200" : "bg-gray-100 text-gray-700 border border-gray-200"}`}>
                         {r.is_regress ? "↑ regress" : "—"} {r.is_regress ? `${r.regress_pct}%` : ""}
                       </span>)
                     : "—"}
                 </td>
+                <td className="px-3 py-2">
+                  <button
+                    className="px-2 py-1 rounded-md border hover:bg-gray-50 disabled:opacity-50"
+                    onClick={async () => {
+                      try {
+                        const res = await fetch(`/ops/sentry-link?route=${encodeURIComponent(r.route)}`, { cache: "no-store" });
+                        const j = await res.json();
+                        if (j?.url) return window.open(j.url, "_blank", "noopener,noreferrer");
+                        if (j?.missing) {
+                          alert("Configure SENTRY_ORG_SLUG and SENTRY_PROJECT_SLUG secrets to enable deep links.");
+                        }
+                      } catch {
+                        alert("Could not create Sentry link. Check backend logs.");
+                      }
+                    }}
+                    title="Open Sentry filtered to this route (last 1h)"
+                  >
+                    Sentry →
+                  </button>
+                </td>


(When ready) Set secrets — no code change needed

SENTRY_ORG_SLUG=<your org slug>

SENTRY_PROJECT_SLUG=<your project slug>

SENTRY_ENV=<dev|staging|prod> (optional; defaults to NODE_ENV)

Success check:

Visit /velocity; each row shows a Sentry → button.

With secrets unset: clicking shows a gentle prompt to configure secrets.

After setting secrets: Sentry → opens a filtered Discover view for that route, last 1h, with tags (route, method, release, build_time, status_code) on events.

Next: wait for user.