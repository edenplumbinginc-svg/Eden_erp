Here‚Äôs a clean, copy-paste-ready Replit command that will:

Run a single full-cycle transactional test for task creation,

Verify both the task and notification exist in the DB,

Print clear PASS/FAIL signals so you‚Äôll see exactly where it breaks.

üß≠ COMMAND ‚Äî Transactional Integrity Verification

Paste this into your Replit shell:

echo "üöÄ Running Transactional Integrity Test"
echo "========================================"
PROJECT_ID="88d4340c-da5e-4323-af02-13bc9b14a7eb"
EMAIL="admin@edenmep.ca"

# Step 1 ‚Äî Create a new task via API
echo ""
echo "üìù Creating task (should trigger notification inside same transaction)..."
TASK_JSON=$(curl -s -X POST "http://localhost:3000/api/projects/$PROJECT_ID/tasks" \
  -H "Content-Type: application/json" \
  -H "X-Dev-Email: $EMAIL" \
  -d '{"title":"Txn Integrity Test","priority":"high","description":"Atomicity verification"}')

echo "$TASK_JSON" | jq .

TASK_ID=$(echo "$TASK_JSON" | jq -r '.id')

# Step 2 ‚Äî Wait briefly for async operations (if any)
sleep 2

# Step 3 ‚Äî Verify task exists
echo ""
echo "üîç Checking if task persisted..."
psql "$DATABASE_URL" -c "
  SELECT id, title, status, created_at
  FROM tasks
  WHERE id = '$TASK_ID';
"

# Step 4 ‚Äî Verify notifications for that task
echo ""
echo "üîî Checking notifications..."
psql "$DATABASE_URL" -c "
  SELECT type,
         channel,
         payload->>'title' AS payload_title,
         to_char(created_at,'YYYY-MM-DD HH24:MI:SS.MS') AS created
  FROM notifications
  WHERE task_id = '$TASK_ID'
  ORDER BY created_at DESC
  LIMIT 5;
"

# Step 5 ‚Äî Result summary
echo ""
echo "‚úÖ If both a task row AND a notification row appear above, transactional writes are working correctly."
echo "‚ùå If the task is missing, transaction rolled back."
echo "‚ùå If the task exists but no notification, event insert failed inside transaction."

üí° What it does

Creates a task through your live API (POST /api/projects/:id/tasks)

Queries Postgres directly for:

The new task record

Any related notifications

Displays timestamps to confirm they committed together.

If you want to force a rollback test (simulate failure), run:

TXN_FAIL=1 node server.js


and make your code throw when TXN_FAIL is set ‚Äî the command above will show the task and notification missing together (proving atomic rollback).

Run this once after each code tweak. It‚Äôs your ‚Äútruth serum‚Äù for atomicity.