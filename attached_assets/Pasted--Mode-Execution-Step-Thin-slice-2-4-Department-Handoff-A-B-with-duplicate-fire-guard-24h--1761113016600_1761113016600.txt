[Mode: Execution]

Step: Thin slice 2.4 — Department Handoff (A→B) with duplicate-fire guard (24h) + inline control on each task.

Why it matters: Makes cross-team flow explicit and auditable without risky refactors. The guard stops noisy double handoffs; the audit makes responsibility shifts visible.

Inputs needed: DATABASE_URL (Postgres). Your auth exposes req.user.id/email and role.

Command (paste at repo root):

# 1) DB — minimal additive tables/columns
mkdir -p server/migrations
cat > server/migrations/20251022_department_handoff.sql <<'SQL'
-- Track a task’s current department (nullable, additive)
ALTER TABLE tasks
  ADD COLUMN IF NOT EXISTS department text;

-- Handoff events (append-only) for audit + duplicate guard
CREATE TABLE IF NOT EXISTS handoff_events (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  task_id uuid NOT NULL,
  from_department text,
  to_department text NOT NULL,
  actor_email text NOT NULL,
  created_at timestamptz NOT NULL DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_handoff_events_task ON handoff_events(task_id);
CREATE INDEX IF NOT EXISTS idx_handoff_events_recent ON handoff_events(task_id, to_department, created_at DESC);
SQL

psql "$DATABASE_URL" -f server/migrations/20251022_department_handoff.sql

# 2) Service — core handoff with 24h duplicate guard and audit
mkdir -p server/services
cat > server/services/handoff.js <<'JS'
const { pool } = require('../lib/db');
const audit = require('../lib/audit');

/**
 * Perform a department handoff with a 24h duplicate guard per (task_id, to_department).
 * - If the last event to the same to_department is <24h ago, no-op (returns {skipped:true}).
 * - Otherwise:
 *    * Insert into handoff_events
 *    * Update tasks.department = to_department
 *    * Write audit entry 'task.handoff'
 */
async function handoffTask({ taskId, toDepartment, actorEmail }) {
  if (!taskId) throw new Error('taskId required');
  if (!toDepartment) throw new Error('to_department required');

  const client = await pool.connect();
  try {
    await client.query('BEGIN');

    // Fetch current department (for audit)
    const t = await client.query('SELECT department FROM tasks WHERE id = $1 FOR UPDATE', [taskId]);
    if (t.rowCount === 0) throw new Error('task not found');
    const fromDepartment = t.rows[0].department || null;

    // Duplicate-fire guard (24h)
    const dup = await client.query(
      `SELECT 1
       FROM handoff_events
       WHERE task_id = $1 AND to_department = $2
         AND created_at >= NOW() - INTERVAL '24 hours'
       LIMIT 1`,
      [taskId, toDepartment]
    );
    if (dup.rowCount > 0) {
      await audit.log(client, {
        actor: actorEmail || 'system',
        action: 'task.handoff.skipped',
        meta: { taskId, fromDepartment, toDepartment, reason: 'duplicate_24h' }
      });
      await client.query('COMMIT');
      return { ok: true, skipped: true, reason: 'duplicate_24h' };
    }

    // Insert event
    await client.query(
      `INSERT INTO handoff_events (task_id, from_department, to_department, actor_email)
       VALUES ($1, $2, $3, $4)`,
      [taskId, fromDepartment, toDepartment, actorEmail || 'system']
    );

    // Update task server-truth department
    await client.query(
      `UPDATE tasks SET department = $2 WHERE id = $1`,
      [taskId, toDepartment]
    );

    // Audit
    await audit.log(client, {
      actor: actorEmail || 'system',
      action: 'task.handoff',
      meta: { taskId, fromDepartment, toDepartment }
    });

    await client.query('COMMIT');
    return { ok: true, skipped: false, fromDepartment, toDepartment };
  } catch (e) {
    await client.query('ROLLBACK');
    throw e;
  } finally {
    client.release();
  }
}

module.exports = { handoffTask };
JS

# 3) Routes — POST /tasks/:id/handoff (role: admin or coordinator)
applypatch <<'PATCH'
*** Begin Patch
*** Update File: server/index.js
@@
 const express = require('express');
 const app = express();
@@
 const { performanceSummary } = require('./services/performanceReport');
+const { handoffTask } = require('./services/handoff');
 
 // ...existing routes
 
+// Department Handoff (A -> B)
+app.post('/tasks/:id/handoff', requireAuth(['admin','coordinator']), express.json(), async (req, res, next) => {
+  try {
+    const taskId = req.params.id;
+    const to = (req.body?.to_department || '').trim();
+    if (!to) return res.status(400).json({ ok: false, error: 'to_department required' });
+    const result = await handoffTask({ taskId, toDepartment: to, actorEmail: req.user?.email || 'user' });
+    res.json({ ok: true, ...result });
+  } catch (e) { next(e); }
+});
*** End Patch
PATCH

# 4) Client — inline control on each Task row (Soft Light UI)
applypatch <<'PATCH'
*** Begin Patch
*** Update File: client/src/components/TaskRow.tsx
@@
 import React from 'react';
 
-export default function TaskRow({ task }) {
+export default function TaskRow({ task }) {
+  const [handoffTo, setHandoffTo] = React.useState('Operations'); // sensible default
+  const [busyHandoff, setBusyHandoff] = React.useState(false);
   return (
     <div className="flex items-center justify-between p-3 rounded-2xl shadow mb-2">
       <div className="flex items-center gap-3">
         {/* existing: status dropdown, title, etc. */}
         <span className="text-sm opacity-70">{task.title}</span>
         {task.needs_idle_reminder && (
           <span className="text-xs px-2 py-0.5 rounded-2xl shadow">Idle</span>
         )}
+        {task.department && (
+          <span className="text-xs px-2 py-0.5 rounded-2xl shadow">{task.department}</span>
+        )}
       </div>
       <div className="flex items-center gap-2">
         {/* existing inline controls */}
+        <div className="flex items-center gap-1">
+          <label className="text-xs opacity-70">Handoff:</label>
+          <select
+            aria-label="Select destination department"
+            className="text-xs px-2 py-1 rounded-2xl shadow focus:outline-none focus:ring"
+            value={handoffTo}
+            onChange={(e) => setHandoffTo(e.target.value)}
+          >
+            <option>Operations</option>
+            <option>Procurement</option>
+            <option>Accounting</option>
+            <option>Service</option>
+            <option>Estimating</option>
+            <option>Scheduling</option>
+          </select>
+          <button
+            className="text-xs px-2 py-1 rounded-2xl shadow transition-all duration-200 hover:shadow-md focus:outline-none focus:ring"
+            disabled={busyHandoff}
+            onClick={async () => {
+              setBusyHandoff(true);
+              try {
+                const r = await fetch(`/tasks/${task.id}/handoff`, {
+                  method: 'POST',
+                  headers: { 'Content-Type': 'application/json' },
+                  body: JSON.stringify({ to_department: handoffTo })
+                });
+                const j = await r.json();
+                if (!j.ok) throw new Error('handoff failed');
+                alert(j.skipped ? 'Handoff skipped (duplicate in last 24h).' : `Handed off to ${handoffTo}`);
+                document.dispatchEvent(new Event('tasks:refresh'));
+              } catch (e) {
+                alert('Failed to handoff');
+              } finally {
+                setBusyHandoff(false);
+              }
+            }}
+            onKeyDown={(e) => { if (e.key === 'Enter') (e.currentTarget as HTMLButtonElement).click(); }}
+          >
+            {busyHandoff ? 'Handing…' : 'Send'}
+          </button>
+        </div>
       </div>
     </div>
   );
 }
*** End Patch
PATCH

# 5) Docs — API contract & cURL
applypatch <<'PATCH'
*** Begin Patch
*** Update File: docs/api-contract.md
@@
+## Department Handoff
+
+### POST `/tasks/:id/handoff` (admin|coordinator)
+Creates a department handoff with a 24h duplicate-fire guard per `(task_id, to_department)`.
+
+**Body**
+```json
+{ "to_department": "Procurement" }
+```
+
+**200**
+```json
+{ "ok": true, "skipped": false, "fromDepartment": "Operations", "toDepartment": "Procurement" }
+```
+If skipped due to duplicate within 24h:
+```json
+{ "ok": true, "skipped": true, "reason": "duplicate_24h" }
+```
+
+**cURL**
+```bash
+curl -X POST "$BASE_URL/tasks/<TASK_ID>/handoff" \
+  -H "Authorization: Bearer $ADMIN_TOKEN" \
+  -H "Content-Type: application/json" \
+  -d '{"to_department":"Procurement"}'
+```
*** End Patch
PATCH

# 6) Tests — guard + update
mkdir -p server/__tests__
cat > server/__tests__/handoff.test.js <<'JS'
const { pool } = require('../lib/db');
const { handoffTask } = require('../services/handoff');

describe('handoffTask', () => {
  beforeAll(async () => { await pool.query('BEGIN'); });
  afterAll(async () => { await pool.query('ROLLBACK'); await pool.end(); });

  test('creates event and updates task department', async () => {
    const t = await pool.query(`INSERT INTO tasks (title, status) VALUES ('Handoff T', 'In Progress') RETURNING id, department`);
    const id = t.rows[0].id;
    const r1 = await handoffTask({ taskId: id, toDepartment: 'Procurement', actorEmail: 'test@edenmep.com' });
    expect(r1.ok).toBe(true);
    expect(r1.skipped).toBe(false);
    const chk = await pool.query(`SELECT department FROM tasks WHERE id=$1`, [id]);
    expect(chk.rows[0].department).toBe('Procurement');

    // Duplicate within 24h -> skipped
    const r2 = await handoffTask({ taskId: id, toDepartment: 'Procurement', actorEmail: 'test@edenmep.com' });
    expect(r2.ok).toBe(true);
    expect(r2.skipped).toBe(true);
  });
});
JS

echo "✅ Department handoff added (DB + service + route + inline UI + docs + tests)"


Success check:

Migration applies cleanly; tasks.department column and handoff_events table exist.

npm test -- server/__tests__/handoff.test.js passes.

POST /tasks/:id/handoff returns { ok:true, skipped:false } first time; { ok:true, skipped:true } if repeated within 24h.

UI shows Handoff select + Send on each task; action updates the department chip and writes audit task.handoff (or task.handoff.skipped).

Next: wait for user