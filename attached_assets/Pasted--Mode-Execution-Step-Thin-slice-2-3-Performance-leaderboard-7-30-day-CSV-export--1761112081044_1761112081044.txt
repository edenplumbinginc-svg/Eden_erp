[Mode: Execution]

**Step:** Thin slice 2.3 — **Performance leaderboard (7/30-day) + CSV export**: add `/reports/performance` (JSON) and `/reports/performance.csv`, plus a small **Download CSV** inline control.

**Why it matters:** Gives a fast, objective read on throughput without touching existing routes. CSV makes sharing and quick analysis trivial.

**Inputs needed:** `DATABASE_URL` (Postgres). Assumes `tasks(status text, updated_at timestamptz, assignee_id uuid NULL)`; if `assignee_id` is absent, results will group under `null`.

**Command (paste at repo root):**

````bash
# 1) Backend: reports service
mkdir -p server/services
cat > server/services/performanceReport.js <<'JS'
const { pool } = require('../lib/db');

/**
 * Leaderboard over last N days by assignee_id.
 * Uses tasks with status='Done' and updated_at within window.
 */
async function performanceSummary({ days = 7 }) {
  const d = Number.isFinite(+days) && +days > 0 ? Math.floor(+days) : 7;
  const { rows } = await pool.query(
    `
    SELECT
      t.assignee_id,
      COUNT(*)::int AS done_count
    FROM tasks t
    WHERE t.status = 'Done'
      AND t.updated_at >= NOW() - ($1 || ' days')::interval
    GROUP BY t.assignee_id
    ORDER BY done_count DESC NULLS LAST
    `,
    [String(d)]
  );
  return rows;
}

module.exports = { performanceSummary };
JS

# 2) Backend: routes (JSON + CSV)
applypatch <<'PATCH'
*** Begin Patch
*** Update File: server/index.js
@@
 const express = require('express');
 const app = express();
@@
 const { getUserPreferences, updateUserPreferences } = require('./services/userPreferences');
+const { performanceSummary } = require('./services/performanceReport');
 
 // ...existing routes
 
+// Reports: Performance (7/30-day)
+app.get('/reports/performance', requireAuth('admin'), async (req, res, next) => {
+  try {
+    const days = Number(req.query.days) || 7;
+    const rows = await performanceSummary({ days });
+    res.json({ ok: true, days, data: rows });
+  } catch (e) { next(e); }
+});
+
+app.get('/reports/performance.csv', requireAuth('admin'), async (req, res, next) => {
+  try {
+    const days = Number(req.query.days) || 7;
+    const rows = await performanceSummary({ days });
+    const header = 'assignee_id,done_count';
+    const body = rows.map(r => `${r.assignee_id || ''},${r.done_count}`).join('\n');
+    res.setHeader('Content-Type', 'text/csv; charset=utf-8');
+    res.setHeader('Content-Disposition', `attachment; filename="performance_${days}d.csv"`);
+    res.send([header, body].join('\n'));
+  } catch (e) { next(e); }
+});
*** End Patch
PATCH

# 3) Frontend: tiny inline control (Download CSV) in Tasks header (admin-only)
applypatch <<'PATCH'
*** Begin Patch
*** Update File: client/src/components/TasksHeader.tsx
@@
       {user?.role === 'admin' && (
         <button
           aria-label="Refresh overdue flags"
           className="px-3 py-2 rounded-2xl shadow transition-all duration-200 hover:shadow-md focus:outline-none focus:ring"
           disabled={busy}
           onClick={async () => {
             setBusy(true);
             try {
               const r = await fetch('/jobs/overdue/recompute', { method: 'POST' });
               const j = await r.json();
               alert(j.ok ? `Overdue recomputed (set_true=${j.set_true}, set_false=${j.set_false})` : 'Failed');
             } finally { setBusy(false); }
           }}
           onKeyDown={(e) => { if (e.key === 'Enter') (e.currentTarget as HTMLButtonElement).click(); }}
         >
           {busy ? 'Recomputing…' : 'Refresh Overdue'}
         </button>
       )}
+
+      {user?.role === 'admin' && (
+        <div className="ml-3 flex items-center gap-2">
+          <label className="text-sm opacity-70">Perf:</label>
+          <select
+            id="perf-days"
+            className="px-2 py-1 rounded-2xl shadow focus:outline-none focus:ring"
+            defaultValue="7"
+          >
+            <option value="7">7d</option>
+            <option value="30">30d</option>
+          </select>
+          <button
+            aria-label="Download performance CSV"
+            className="px-3 py-1 rounded-2xl shadow transition-all duration-200 hover:shadow-md focus:outline-none focus:ring"
+            onClick={() => {
+              const days = (document.getElementById('perf-days') as HTMLSelectElement)?.value || '7';
+              window.open(`/reports/performance.csv?days=${encodeURIComponent(days)}`, '_blank');
+            }}
+          >
+            Download CSV
+          </button>
+        </div>
+      )}
*** End Patch
PATCH

# 4) Docs: API contract
applypatch <<'PATCH'
*** Begin Patch
*** Update File: docs/api-contract.md
@@
+## Performance Reports
+
+### GET `/reports/performance?days=7` (admin)
+Returns per-assignee counts of tasks completed in the last N days.
+
+**200**
+```json
+{ "ok": true, "days": 7, "data": [ { "assignee_id":"uuid|null", "done_count": 5 } ] }
+```
+
+### GET `/reports/performance.csv?days=7` (admin)
+CSV download with columns: `assignee_id,done_count`.
*** End Patch
PATCH

# 5) Tests: basic coverage for report math
mkdir -p server/__tests__
cat > server/__tests__/performanceReport.test.js <<'JS'
const { pool } = require('../lib/db');
const { performanceSummary } = require('../services/performanceReport');

describe('performanceSummary', () => {
  beforeAll(async () => { await pool.query('BEGIN'); });
  afterAll(async () => { await pool.query('ROLLBACK'); await pool.end(); });
  test('counts done tasks within window', async () => {
    const { rows } = await pool.query(`
      WITH ins AS (
        INSERT INTO tasks (title, status, assignee_id, updated_at)
        VALUES
          ('A', 'Done', gen_random_uuid(), NOW() - INTERVAL '1 day'),
          ('B', 'Done', gen_random_uuid(), NOW() - INTERVAL '6 days'),
          ('C', 'In Progress', gen_random_uuid(), NOW() - INTERVAL '1 day'),
          ('D', 'Done', gen_random_uuid(), NOW() - INTERVAL '20 days')
        RETURNING *
      ) SELECT count(*) FROM ins;
    `);
    expect(Number(rows[0].count)).toBe(4);
    const data7 = await performanceSummary({ days: 7 });
    // Should count at least the two 'Done' within 7 days
    const sum7 = data7.reduce((a, r) => a + Number(r.done_count), 0);
    expect(sum7).toBeGreaterThanOrEqual(2);
    const data1 = await performanceSummary({ days: 1 });
    const sum1 = data1.reduce((a, r) => a + Number(r.done_count), 0);
    expect(sum1).toBeGreaterThanOrEqual(0);
  });
});
JS

echo "✅ Performance leaderboard endpoints + CSV + header control + tests + docs"
````

**Success check:**

* `npm test -- server/__tests__/performanceReport.test.js` passes.
* Hitting:

  * `GET /reports/performance?days=7` returns `{ ok:true, data:[…] }`.
  * `GET /reports/performance.csv?days=30` streams a CSV file.
* In the UI header (admin), changing 7d/30d and clicking **Download CSV** downloads data.
* Change respects the UI DoD: loads fast, has error/empty states via existing fetch handling, uses Soft Light tokens.

**Next:** wait for user
