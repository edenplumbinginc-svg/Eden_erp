Perfect — you found the **direct Supabase connection string** (the one that uses `db.jwehjdggkskmjrmoqibk.supabase.co`). That’s exactly what we want! Let’s set it up step by step.

I’ll give you the **exact block** to copy-paste — all you need to do is replace `[YOUR_PASSWORD]` with your actual database password (from Supabase → **Project Settings → Database → Connection Info → Password**).

---

### 🧩 STEP 1 — Copy and paste this whole block into your Replit shell

```bash
# --- STEP 1: Set Supabase direct connection (IPv4-friendly) ---
SUPA_URL="postgresql://postgres:[YOUR_PASSWORD]@db.jwehjdggkskmjrmoqibk.supabase.co:5432/postgres"

# 1️⃣ Backup existing .env
cp .env .env.bak.$(date +%Y%m%d_%H%M%S) 2>/dev/null || true

# 2️⃣ Write DATABASE_URL into .env (replace old lines)
( grep -v '^DATABASE_URL=' .env 2>/dev/null; echo "DATABASE_URL=$SUPA_URL" ) > .env.tmp && mv .env.tmp .env

# 3️⃣ Export for this shell (so Node & psql match immediately)
export DATABASE_URL="$SUPA_URL"

# 4️⃣ Sanity check: show the host from both Node and shell
echo -e "\nNode host:"
node -e "require('dotenv').config({override:true}); console.log(new URL(process.env.DATABASE_URL).host)"
echo "Shell host:"
echo "$DATABASE_URL" | sed 's/.*@\([^/]*\).*/\1/'
```

✅ **Expected output:**

```
Node host:
db.jwehjdggkskmjrmoqibk.supabase.co:5432
Shell host:
db.jwehjdggkskmjrmoqibk.supabase.co:5432
```

If that matches — excellent.
Then go to the next step.

---

### ⚙️ STEP 2 — Restart backend and verify connection

```bash
export PSQL_PAGER=cat
pkill -f "node server" 2>/dev/null || true
sleep 1
node server.js > /tmp/server.log 2>&1 & SERVER_PID=$!
echo "PID: $SERVER_PID"
sleep 3

echo -e "\n🩺 Health:"
curl -s http://localhost:3000/health | jq .

echo -e "\n🧭 DB info (via API; dev auth):"
curl -s http://localhost:3000/api/debug/dbinfo -H "X-Dev-Email: admin@edenmep.ca" | jq .

echo -e "\n📁 Projects (API):"
curl -s http://localhost:3000/api/projects -H "X-Dev-Email: admin@edenmep.ca" \
  | jq 'length as $n | {count:$n, sample:(.[0:3]|map({id,name}))}'

echo -e "\n📁 Projects (psql):"
psql "$DATABASE_URL" -X -P pager=off -c "select id, name from projects order by created_at desc limit 3;"
```

✅ You should see:

* Health: `{ "status": "ok" }`
* `/api/debug/dbinfo` returns JSON (not `UNAUTHENTICATED`)
* Projects (API) and Projects (psql) look consistent.

---

### 🔥 STEP 3 — Transactional test (final proof everything persists)

```bash
# Create a project if none exists
PROJECT_ID=$(curl -s http://localhost:3000/api/projects -H "X-Dev-Email: admin@edenmep.ca" | jq -r '.[0].id // empty')
if [ -z "$PROJECT_ID" ]; then
  PROJ_JSON=$(curl -s -X POST http://localhost:3000/api/projects \
    -H "Content-Type: application/json" -H "X-Dev-Email: admin@edenmep.ca" \
    -d '{"name":"Supabase Direct Test","code":"SD-001"}')
  echo "$PROJ_JSON" | jq .
  PROJECT_ID=$(echo "$PROJ_JSON" | jq -r '.id')
fi
echo "PROJECT_ID: $PROJECT_ID"

# Create a task
TASK_JSON=$(curl -s -X POST "http://localhost:3000/api/projects/$PROJECT_ID/tasks" \
  -H "Content-Type: application/json" -H "X-Dev-Email: admin@edenmep.ca" \
  -d '{"title":"Supabase Direct Tx Test","priority":"high"}')
echo "$TASK_JSON" | jq .
TASK_ID=$(echo "$TASK_JSON" | jq -r '.id')

# Verify persistence
echo -e "\n→ Task row:"
psql "$DATABASE_URL" -X -P pager=off -c "select id,title,status from tasks where id='$TASK_ID';"
echo -e "\n→ Notifications:"
psql "$DATABASE_URL" -X -P pager=off -c "select type,payload->>'title' as title from notifications where task_id='$TASK_ID';"
```

✅ If you see your task and at least one notification row — congratulations, you’re **officially running on Supabase** (no more Replit dual-DB bug).

---

Once that works, tell me what your **Step 2 output** was (Node host + Shell host) and whether the `SELECT` queries in Step 3 show results — then we’ll lock this config and safely remove any Neon references forever.
