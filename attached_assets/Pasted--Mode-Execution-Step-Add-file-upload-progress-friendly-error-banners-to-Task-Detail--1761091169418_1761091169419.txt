[Mode: Execution]

Step: Add **file upload progress** + **friendly error banners** to Task Detail uploads (UI-only).

Why it matters: Visible progress + clear failures turns attachments from “mystery spinner” into a trustworthy workflow for your team.

Inputs needed:

* Frontend app at `apps/coordination_ui`
* Existing upload flow in `TaskDetail.jsx` using `attachments/init → PUT → attachments/complete`

Command (copy–paste updates):

1. Add a tiny Alert component

```jsx
// apps/coordination_ui/src/components/Alert.jsx
export default function Alert({ kind="error", children }) {
  const styles = kind === "error"
    ? "bg-red-50 text-red-700 border-red-200"
    : "bg-green-50 text-green-700 border-green-200";
  return (
    <div className={`border rounded px-3 py-2 text-sm ${styles}`}>
      {children}
    </div>
  );
}
```

2. Enhance the upload mutation with progress + error handling

```jsx
// apps/coordination_ui/src/pages/TaskDetail.jsx
// …existing imports…
import Alert from "../components/Alert";

// inside TaskDetail file, near other state hooks:
const [uploadPct, setUploadPct] = useState(0);
const [uploadErr, setUploadErr] = useState(null);
const [uploadOk, setUploadOk] = useState(false);

// replace your existing uploadFile mutation with this:
const uploadFile = useMutation({
  mutationFn: async (file) => {
    setUploadErr(null);
    setUploadOk(false);
    setUploadPct(0);

    // 1) init
    const init = (await api.post(`/tasks/${taskId}/attachments/init`, {
      fileName: file.name, mime: file.type || "application/octet-stream", sizeBytes: file.size
    })).data;

    // 2) PUT to signed URL (track progress)
    await new Promise((resolve, reject) => {
      const xhr = new XMLHttpRequest();
      xhr.open("PUT", init.uploadUrl);
      if (file.type) xhr.setRequestHeader("Content-Type", file.type);
      xhr.upload.onprogress = (e) => {
        if (!e.lengthComputable) return;
        const pct = Math.round((e.loaded / e.total) * 100);
        setUploadPct(pct);
      };
      xhr.onload = () => (xhr.status >= 200 && xhr.status < 300) ? resolve() : reject(new Error(`Upload failed (${xhr.status})`));
      xhr.onerror = () => reject(new Error("Network error during upload"));
      xhr.send(file);
    });

    // 3) complete
    const done = (await api.post(`/tasks/${taskId}/attachments/complete`, {
      taskId,
      bucket: init.bucket,
      path: init.path,
      mime: file.type || "application/octet-stream",
      sizeBytes: file.size
    })).data;

    return done;
  },
  onSuccess: () => {
    setUploadOk(true);
    setTimeout(() => setUploadOk(false), 3000);
    if (uploadRef.current) uploadRef.current.value = "";
    setUploadPct(0);
    queryClient.invalidateQueries({ queryKey: ["attachments", taskId] });
  },
  onError: (e) => {
    const msg = e?.response?.data?.error?.message || e.message || "Upload failed";
    setUploadErr(msg);
  }
});
```

3. Show the progress bar + alerts in the UI

```jsx
// in the Attachments/Comments section where your upload input/button live:
<div className="flex items-center gap-2">
  <input
    ref={uploadRef}
    type="file"
    accept="image/*,video/*,audio/*,application/pdf"
    onChange={e => setFile(e.target.files?.[0] ?? null)}
  />
  <button
    className="px-3 py-1 rounded border"
    disabled={!file || uploadFile.isPending}
    onClick={() => file && uploadFile.mutate(file)}
  >
    {uploadFile.isPending ? "Uploading…" : "Upload file"}
  </button>
</div>

{/* Progress */}
{uploadFile.isPending && (
  <div className="mt-2">
    <div className="h-2 w-full bg-gray-200 rounded">
      <div
        className="h-2 bg-black rounded"
        style={{ width: `${uploadPct}%`, transition: "width 120ms linear" }}
      />
    </div>
    <div className="text-xs text-gray-600 mt-1">{uploadPct}%</div>
  </div>
)}

{/* Alerts */}
{uploadErr && (
  <div className="mt-2"><Alert>{uploadErr}</Alert></div>
)}
{uploadOk && (
  <div className="mt-2"><Alert kind="success">Upload complete.</Alert></div>
)}
```

Success check:

* Select a large-ish file → progress bar climbs smoothly to 100%.
* On success: “Upload complete.” appears, attachments list refreshes.
* On failure (e.g., revoke signed URL): red error banner shows readable message.
* Viewer role trying to upload shows RBAC error in the banner.

Next: wait for user

After this is green, the next single step will be a **minimal checklist editor** (add/remove/toggle) reusing your existing subtask routes—keeps momentum on the items you flagged.
