[Mode: Execution]

**Step:** Expose Supabase env to Vite (frontend) and verify JWT → `/api/me/permissions` end-to-end in the browser.

**Why it matters:** Your backend JWT checks are passing; the UI must now read real tokens so `useHasPermission()` reflects live roles. This locks auth→RBAC flow without touching business logic. (Per your INFJ rule: we ignore Replit’s auto-suggestions unless they clearly improve coherence.)

**Inputs needed:**

* Replit project access.
* Secrets already set: `SUPABASE_URL`, `SUPABASE_ANON_KEY`.

**Command:**

1. In Replit → Tools → Secrets, create two frontend vars (Vite only reads `VITE_*`):

```
VITE_SUPABASE_URL=${SUPABASE_URL}
VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
```

2. Restart the web dev server (stop/run).
3. Ensure the client exists (skip if you already added it):

```ts
// apps/web/src/lib/supabaseClient.ts
import { createClient } from "@supabase/supabase-js";
export const supabase = createClient(
  import.meta.env.VITE_SUPABASE_URL!,
  import.meta.env.VITE_SUPABASE_ANON_KEY!,
  { auth: { persistSession: true, autoRefreshToken: true, detectSessionInUrl: true } }
);
```

4. In the browser: open DevTools → Console, run:

```js
const { data } = await window.supabase?.auth?.getSession?.?.() ?? {};
if (!data?.session) console.log("No session yet; log in first at /auth/login");
else {
  const jwt = data.session.access_token;
  const r = await fetch("/api/me/permissions", { headers: { Authorization: `Bearer ${jwt}` } });
  console.log("Status", r.status, "Body", await r.json());
}
```

**Success check:**

* If not logged in: `/api/me/permissions` returns `401`.
* After login: console shows `Status 200` and a body like:

  ```json
  { "roles": ["viewer"], "permissions": ["projects:read","tasks:read", "..."] }
  ```
* Visiting a protected API (e.g., POST `/api/tasks`) without the JWT yields `403` if you lack `tasks:create`.

**Next:** wait for user.

When you confirm this passes, I’ll give the next micro-step: swap in `PrivateRoute` (hide DevAuthSwitcher), plus a one-liner default-role assigner so new users immediately see read-only UI without manual DB edits.
