tep: Add shared UI state components and refactor two pages (Incidents, Velocity) to use them so states look consistent and are trivial to add elsewhere.

Why it matters: Standardized loading/empty/error/unauthorized/not_found states make your app feel cohesive and keep your contract simple to satisfy on every page.

Inputs needed:

Repo path: apps/coordination_ui

Existing pages: src/pages/IncidentsPage.jsx, src/pages/Velocity.jsx

Command (copy–paste):

# 1) Shared state components
applypatch <<'PATCH'
*** Begin Patch
*** Add File: apps/coordination_ui/src/components/ui/PageStates.jsx
/* Simple, consistent state blocks with design tokens */
export function Loading({ label = "Loading…" }) {
  return <div data-state="loading" className="card radius-xl" style={{ padding: '16px' }}>{label}</div>;
}
export function Empty({ title = "Nothing here yet", hint }) {
  return (
    <div data-state="empty" className="card radius-xl">
      <h3>{title}</h3>
      {hint && <p className="muted">{hint}</p>}
    </div>
  );
}
export function ErrorBlock({ title = "Something went wrong", detail }) {
  return (
    <div data-state="error" className="card radius-xl" style={{ borderColor: 'var(--danger)' }}>
      <h3>{title}</h3>
      {detail && <p className="muted">{detail}</p>}
    </div>
  );
}
export function Unauthorized({ title = "You’re not authorized" }) {
  return (
    <div data-state="unauthorized" className="card radius-xl">
      <h3>{title}</h3>
      <p className="muted">Try signing in or switching accounts.</p>
    </div>
  );
}
export function NotFound({ title = "Not found" }) {
  return (
    <div data-state="not_found" className="card radius-xl">
      <h3>{title}</h3>
      <p className="muted">The resource could not be located.</p>
    </div>
  );
}
*** End Patch
PATCH

# 2) Refactor IncidentsPage to use shared states (no logic changes)
applypatch <<'PATCH'
*** Begin Patch
*** Update File: apps/coordination_ui/src/pages/IncidentsPage.jsx
@@
-import { useEffect, useState } from 'react';
-import { Link } from 'react-router-dom';
+import { useEffect, useState } from 'react';
+import { Link } from 'react-router-dom';
+import { Loading, Empty, ErrorBlock, Unauthorized } from '../components/ui/PageStates.jsx';
@@
-  if (status === 'loading') return <div data-state="loading" className="skeleton">Loading incidents…</div>;
-  if (status === 'unauthorized') return <div data-state="unauthorized">You are not authorized to view incidents.</div>;
-  if (status === 'error') return <div data-state="error">Could not load incidents.</div>;
-  if (status === 'empty') return <div data-state="empty">No incidents found.</div>;
+  if (status === 'loading') return <Loading label="Loading incidents…" />;
+  if (status === 'unauthorized') return <Unauthorized />;
+  if (status === 'error') return <ErrorBlock title="Could not load incidents." />;
+  if (status === 'empty') return <Empty title="No incidents found" hint="Incidents appear here when alarms correlate." />;
@@
-  return (
-    <div>
-      <h1>Incidents</h1>
-      <ul>
-        {data.map(it => (
-          <li key={it.id}>
-            <Link to={`/incidents/${encodeURIComponent(it.id)}`}>{it.title || `Incident ${it.id}`}</Link>
-          </li>
-        ))}
-      </ul>
-    </div>
-  );
+  return (
+    <div>
+      <h1>Incidents</h1>
+      <div className="grid-auto" style={{ marginTop: '12px' }}>
+        {data.map(it => (
+          <Link key={it.id} to={`/incidents/${encodeURIComponent(it.id)}`} className="card radius-xl" style={{ textDecoration:'none', color:'inherit' }}>
+            <div className="muted" style={{ fontSize:'0.8rem', marginBottom:'6px' }}>Incident</div>
+            <div style={{ fontWeight:600 }}>{it.title || `Incident ${it.id}`}</div>
+          </Link>
+        ))}
+      </div>
+    </div>
+  );
*** End Patch
PATCH

# 3) Refactor IncidentDetail to use shared states (adds NotFound)
applypatch <<'PATCH'
*** Begin Patch
*** Update File: apps/coordination_ui/src/pages/IncidentDetail.jsx
@@
-import { useEffect, useState } from 'react';
-import { useParams } from 'react-router-dom';
+import { useEffect, useState } from 'react';
+import { useParams } from 'react-router-dom';
+import { Loading, ErrorBlock, Unauthorized, NotFound } from '../components/ui/PageStates.jsx';
@@
-  if (status === 'loading') return <div data-state="loading" className="skeleton">Loading incident…</div>;
-  if (status === 'unauthorized') return <div data-state="unauthorized">Not authorized.</div>;
-  if (status === 'not_found') return <div data-state="not_found">Incident not found.</div>;
-  if (status === 'error') return <div data-state="error">Failed to load incident.</div>;
+  if (status === 'loading') return <Loading label="Loading incident…" />;
+  if (status === 'unauthorized') return <Unauthorized />;
+  if (status === 'not_found') return <NotFound title="Incident not found" />;
+  if (status === 'error') return <ErrorBlock title="Failed to load incident." />;
*** End Patch
PATCH

# 4) Refactor Velocity to use shared states (keeps your existing logic; adjust imports if file path differs)
applypatch <<'PATCH'
*** Begin Patch
*** Update File: apps/coordination_ui/src/pages/Velocity.jsx
@@
-import { useEffect, useState } from 'react';
+import { useEffect, useState } from 'react';
+import { Loading, ErrorBlock } from '../components/ui/PageStates.jsx';
@@
-  if (status === 'loading') return <div data-state="loading" className="skeleton">Loading velocity…</div>;
-  if (status === 'error') return <div data-state="error">Could not load velocity metrics.</div>;
+  if (status === 'loading') return <Loading label="Loading velocity…" />;
+  if (status === 'error') return <ErrorBlock title="Could not load velocity metrics." />;
*** End Patch
PATCH

# 5) Quick run: shared components are plain React, no new deps needed
# Your existing smoke tests should still pass (they key off data-state and headings).


Success check:

Open /incidents, /incidents/123, /velocity and briefly throttle network: you’ll see the unified cards for loading and errors.

Run npm run test:smoke in CI: headings + data-state still satisfy the strict selectors.

Visual cohesion: state blocks look the same across pages with your new tokens, radius, and elevation.

Next: wait for user