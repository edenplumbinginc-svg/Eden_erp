Step: Ship a Guest View (public, read-only) that consumes your time-boxed links — backend token resolve + frontend /guest?token= page with limited access (view task details, checklist, comments, attachments list).

Why it matters: You already generate guest links; this makes them usable. Vendors/clients can open a link, see the task, and reply safely — auditable, time-limited, RBAC-respecting.

Inputs needed:

Backend running (Node/Express with guest_links, notifications, audit_logs)

Frontend app at apps/coordination_ui

Command:

Backend: add resolve + guard

// routes/guestView.js
import { Router } from "express";
import { pool } from "../services/database.js";
import { audit } from "../utils/audit.js";
import rateLimit from "express-rate-limit";

const router = Router();
const limiter = rateLimit({ windowMs: 60_000, max: 60 });

router.use(limiter);

// GET /api/guest/resolve?token=UUID
router.get("/resolve", async (req, res) => {
  const { token } = req.query;
  if (!token) return res.status(400).json({ error: { code: "BAD_REQUEST", message: "token required" } });

  const { rows } = await pool.query(
    `SELECT scope, scope_id, expires_at FROM guest_links WHERE token=$1 LIMIT 1`, [token]
  );
  if (!rows.length) return res.status(404).json({ error: { code: "NOT_FOUND", message: "invalid or expired link" } });

  const link = rows[0];
  if (new Date(link.expires_at) < new Date()) {
    return res.status(410).json({ error: { code: "EXPIRED", message: "link expired" } });
  }

  if (link.scope === "task") {
    const t = await pool.query(`
      SELECT id, project_id, title, description, status, priority, due_at,
             ball_owner_type, ball_owner_id, ball_since
      FROM tasks WHERE id=$1
    `, [link.scope_id]);
    const comments = await pool.query(`
      SELECT id, author_id, body, created_at FROM task_comments WHERE task_id=$1 ORDER BY created_at DESC LIMIT 100
    `, [link.scope_id]);
    const files = await pool.query(`
      SELECT id, file_name, mime_type, size_bytes, created_at
      FROM task_attachments WHERE task_id=$1 ORDER BY created_at DESC
    `, [link.scope_id]);

    await audit(null, "guest.view", `task:${link.scope_id}`, { tokenPreview: String(token).slice(0,8) });

    return res.json({
      scope: "task",
      task: t.rows[0] || null,
      comments: comments.rows,
      attachments: files.rows,
      expiresAt: link.expires_at
    });
  }

  if (link.scope === "project") {
    const p = await pool.query(`SELECT id, name, code, status FROM projects WHERE id=$1`, [link.scope_id]);
    const tasks = await pool.query(`
      SELECT id, title, status, priority, due_at
      FROM tasks WHERE project_id=$1 ORDER BY created_at DESC LIMIT 200
    `, [link.scope_id]);

    await audit(null, "guest.view", `project:${link.scope_id}`, { tokenPreview: String(token).slice(0,8) });

    return res.json({
      scope: "project",
      project: p.rows[0] || null,
      tasks: tasks.rows,
      expiresAt: link.expires_at
    });
  }

  return res.status(400).json({ error: { code: "BAD_SCOPE", message: "unsupported link scope" } });
});

export default router;

// server.js (wire the router)
import guestViewRouter from "./routes/guestView.js";
app.use("/api/guest", guestViewRouter);


Frontend: public Guest page (no auth headers)

// apps/coordination_ui/src/pages/GuestView.jsx
import { useEffect, useState } from "react";
import { useSearchParams, Link } from "react-router-dom";
import axios from "axios";

export default function GuestView(){
  const [sp] = useSearchParams();
  const token = sp.get("token");
  const [data, setData] = useState({ loading: true, err: null, payload: null });

  useEffect(() => {
    if (!token) { setData({ loading:false, err:"Missing token", payload:null }); return; }
    axios.get(`/api/guest/resolve`, { params: { token } })
      .then(r => setData({ loading:false, err:null, payload:r.data }))
      .catch(e => setData({ loading:false, err: e?.response?.data?.error?.message || "Failed to load", payload:null }));
  }, [token]);

  if (data.loading) return <div className="p-6">Loading…</div>;
  if (data.err) return <div className="p-6 text-red-600">Error: {data.err}</div>;

  const p = data.payload;
  return (
    <div className="max-w-3xl mx-auto p-6 space-y-4">
      <div className="flex items-center justify-between">
        <h1 className="text-xl font-semibold">Eden Guest View</h1>
        <div className="text-sm text-gray-600">Expires: {new Date(p.expiresAt).toLocaleString()}</div>
      </div>

      {p.scope === "task" && p.task && (
        <div className="space-y-4">
          <div className="rounded-2xl border p-4 bg-white">
            <div className="font-medium">{p.task.title}</div>
            <div className="text-sm text-gray-600">
              Status: {p.task.status} • Priority: {p.task.priority || "—"} • Due: {p.task.due_at ? new Date(p.task.due_at).toLocaleDateString() : "—"}
            </div>
            {p.task.ball_owner_type && (
              <div className="text-xs mt-2">
                Ball in Court: {p.task.ball_owner_type}:{String(p.task.ball_owner_id || "").slice(0,8)}
              </div>
            )}
          </div>

          <div className="rounded-2xl border p-4 bg-white">
            <div className="font-semibold mb-2">Attachments</div>
            {p.attachments.length === 0 ? <div className="text-sm text-gray-500">No files.</div> : (
              <ul className="text-sm space-y-1">
                {p.attachments.map(a => (
                  <li key={a.id}>{a.file_name} ({Math.round(a.size_bytes/1024)} KB) • {a.mime_type}</li>
                ))}
              </ul>
            )}
          </div>

          <div className="rounded-2xl border p-4 bg-white">
            <div className="font-semibold mb-2">Recent Comments</div>
            {p.comments.length === 0 ? <div className="text-sm text-gray-500">No comments yet.</div> : (
              <ul className="text-sm space-y-3">
                {p.comments.map(c => (
                  <li key={c.id}>
                    <div className="text-gray-700">{c.body}</div>
                    <div className="text-xs text-gray-500">{new Date(c.created_at).toLocaleString()}</div>
                  </li>
                ))}
              </ul>
            )}
          </div>

          <div className="text-sm">
            Need edit access? Contact your Eden PM. <Link className="underline" to="/">Back to app</Link>
          </div>
        </div>
      )}

      {p.scope === "project" && p.project && (
        <div className="space-y-4">
          <div className="rounded-2xl border p-4 bg-white">
            <div className="font-medium">{p.project.name}</div>
            <div className="text-sm text-gray-600">Code: {p.project.code} • Status: {p.project.status}</div>
          </div>
          <div className="rounded-2xl border p-4 bg-white">
            <div className="font-semibold mb-2">Recent Tasks</div>
            {(!p.tasks || p.tasks.length === 0) ? <div className="text-sm text-gray-500">No tasks yet.</div> : (
              <ul className="text-sm space-y-2">
                {p.tasks.map(t => (
                  <li key={t.id} className="flex items-center justify-between">
                    <div>
                      <div className="font-medium">{t.title}</div>
                      <div className="text-xs text-gray-500">Status: {t.status} • Due: {t.due_at ? new Date(t.due_at).toLocaleDateString() : "—"}</div>
                    </div>
                  </li>
                ))}
              </ul>
            )}
          </div>
          <div className="text-sm">
            Need edit access? Contact your Eden PM. <Link className="underline" to="/">Back to app</Link>
          </div>
        </div>
      )}
    </div>
  );
}

// apps/coordination_ui/src/App.jsx  (route)
import GuestView from "./pages/GuestView";
// …
<Route path="/guest" element={<GuestView />} />


Success check:

Generate a task guest link (already working) → open /guest?token=… → see read-only task with comments & attachments and expiry timestamp.

Expired token returns friendly error.

Rate limiting prevents abuse; each view writes guest.view to audit_logs.

No auth headers required; RBAC for guests is enforced by scope (read-only).

Next: wait for user