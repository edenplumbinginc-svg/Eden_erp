Step: Restart staging to load the new secrets and verify the escalation worker in DRY_RUN @ 10% canary. (Backend layer → feature flags live check)

Why it matters: Ensures your hardened worker, RBAC/HMAC guards, and GENERATED column flow are actually running with the intended safety rails before real alerts.

Inputs needed: Your staging app URL, terminal (or Replit console), DB access.

Command (copy–paste):

Restart the backend so env vars apply

Replit: press Run (or stop → Run)

PM2: pm2 restart all

Docker Compose: docker compose restart <service>

Health check

curl -s https://<STAGING_HOST>/ops/escalation/health | jq


Expect:

{
  "enabled": true,
  "v1": true,
  "canaryPct": 10,
  "dryRun": true,
  "healthStatus": "ok",
  "tickIntervalMs": 60000,
  ...
}


Seed a due incident (makes one eligible immediately)

psql "$DATABASE_URL" -c "
UPDATE incidents
SET status='open',
    acknowledged_at=NULL,
    severity='critical',
    escalation_level=0,
    first_seen=now() - interval '8 minutes'
WHERE id IN (SELECT id FROM incidents ORDER BY random() LIMIT 1);
"


(Optional) Force a tick via secured endpoint
If you mounted POST /ops/escalation/tick, include HMAC:

# Body can be empty JSON for a manual tick
body='{}'
sig=$(printf '%s' "$body" | openssl dgst -sha256 -hmac "$OPS_HMAC_SECRET" -binary | xxd -p -c 256)

curl -s -X POST "https://<STAGING_HOST>/ops/escalation/tick" \
  -H "Content-Type: application/json" \
  -H "X-Signature: $sig" \
  --data "$body" | jq


Expect a JSON like: {"escalated": N} where N ≥ 0 (DRY_RUN doesn’t send Slack).

Verify logs/metrics
Look for structured log lines:

escalation_tick_ms (tick duration)

skipped_canary (should increment at 10% canary)

escalations_count (may increment, but no Slack in DRY_RUN)

No Slack errors (since ESC_DRY_RUN=true)

Success check:

Health endpoint shows "enabled": true, "dryRun": true, "canaryPct": 10, "healthStatus": "ok".

Tick runs (auto every 60s or manual) and metrics appear.

No Slack posts occur.

Next: wait for user