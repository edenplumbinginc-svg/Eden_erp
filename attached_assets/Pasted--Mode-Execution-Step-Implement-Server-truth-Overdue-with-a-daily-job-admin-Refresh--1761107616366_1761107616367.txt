[Mode: Execution]

**Step:** Implement **Server-truth Overdue** with a daily job + admin “Refresh Overdue” inline control.

**Why it matters:** Your UI shows an overdue badge, but truth should live on the server. This adds an idempotent job and one-click recompute so ops isn’t blocked by deploys.

**Inputs needed:** `DATABASE_URL` (Postgres), an admin JWT for testing the endpoint.

**Command (paste at repo root):**

````bash
# 1) DB migration
mkdir -p server/migrations
cat > server/migrations/20251022_add_is_overdue.sql <<'SQL'
ALTER TABLE tasks
  ADD COLUMN IF NOT EXISTS is_overdue boolean NOT NULL DEFAULT false,
  ADD COLUMN IF NOT EXISTS overdue_snooze_until timestamptz;
CREATE INDEX IF NOT EXISTS idx_tasks_overdue_true ON tasks(is_overdue) WHERE is_overdue = true;
SQL
psql "$DATABASE_URL" -f server/migrations/20251022_add_is_overdue.sql

# 2) Job logic
mkdir -p server/jobs
cat > server/jobs/recomputeOverdue.js <<'JS'
const { DateTime } = require('luxon');
const { pool } = require('../lib/db');
const audit = require('../lib/audit');

async function recomputeOverdue({ actor = 'system' } = {}) {
  const todayStart = DateTime.now().setZone('America/Toronto').startOf('day').toISO();
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    const setTrue = await client.query(`
      UPDATE tasks t
      SET is_overdue = true
      WHERE t.is_overdue = false
        AND t.due_date IS NOT NULL
        AND t.status NOT IN ('Done','Cancelled')
        AND t.due_date < $1::timestamptz
        AND (t.overdue_snooze_until IS NULL OR t.overdue_snooze_until < NOW())
    `, [todayStart]);

    const setFalse = await client.query(`
      UPDATE tasks t
      SET is_overdue = false
      WHERE t.is_overdue = true AND (
        t.due_date IS NULL
        OR t.status IN ('Done','Cancelled')
        OR t.due_date >= $1::timestamptz
        OR (t.overdue_snooze_until IS NOT NULL AND t.overdue_snooze_until >= NOW())
      )
    `, [todayStart]);

    await audit.log(client, {
      actor, action: 'system.overdue.recompute',
      meta: { set_true: setTrue.rowCount, set_false: setFalse.rowCount, todayStart }
    });
    await client.query('COMMIT');
    return { set_true: setTrue.rowCount, set_false: setFalse.rowCount };
  } catch (e) {
    await client.query('ROLLBACK'); throw e;
  } finally { client.release(); }
}
module.exports = { recomputeOverdue };
JS

# 3) Wire endpoint + cron (03:00 America/Toronto)
applypatch <<'PATCH'
*** Begin Patch
*** Update File: server/index.js
@@
 const express = require('express');
 const app = express();
+const cron = require('node-cron');
+const { recomputeOverdue } = require('./jobs/recomputeOverdue');
@@
-app.post('/jobs/overdue/recompute', requireAuth('admin'), async (req, res, next) => {
+app.post('/jobs/overdue/recompute', requireAuth('admin'), async (req, res, next) => {
   try {
-    res.json({ ok: true });
+    const r = await recomputeOverdue({ actor: req.user?.email || 'admin' });
+    res.json({ ok: true, ...r });
   } catch (e) { next(e); }
 });
+
+cron.schedule('0 3 * * *', async () => {
+  try { await recomputeOverdue({ actor: 'cron' }); console.log('[cron] overdue recomputed'); }
+  catch (e) { console.error('[cron] overdue recompute failed', e); }
+}, { timezone: 'America/Toronto' });
*** End Patch
PATCH

# 4) Admin inline control (Soft Light: rounded-2xl, soft shadow, 150–200ms)
applypatch <<'PATCH'
*** Begin Patch
*** Update File: client/src/components/TasksHeader.tsx
@@
 import React from 'react';
+import { useState } from 'react';
+import { useSession } from '../hooks/useSession';
 
 export default function TasksHeader() {
+  const { user } = useSession();
+  const [busy, setBusy] = useState(false);
   return (
     <div className="flex items-center justify-between p-4">
       <h1 className="text-xl font-medium">Tasks</h1>
+      {user?.role === 'admin' && (
+        <button
+          aria-label="Refresh overdue flags"
+          className="px-3 py-2 rounded-2xl shadow transition-all duration-200 hover:shadow-md focus:outline-none focus:ring"
+          disabled={busy}
+          onClick={async () => {
+            setBusy(true);
+            try {
+              const r = await fetch('/jobs/overdue/recompute', { method: 'POST' });
+              const j = await r.json();
+              alert(j.ok ? `Overdue recomputed (set_true=${j.set_true}, set_false=${j.set_false})` : 'Failed');
+            } finally { setBusy(false); }
+          }}
+          onKeyDown={(e) => { if (e.key === 'Enter') (e.currentTarget as HTMLButtonElement).click(); }}
+        >
+          {busy ? 'Recomputing…' : 'Refresh Overdue'}
+        </button>
+      )}
     </div>
   );
 }
*** End Patch
PATCH

# 5) Docs: cURL snippet
applypatch <<'PATCH'
*** Begin Patch
*** Update File: docs/api-contract.md
@@
+## Jobs / Overdue
+POST `/jobs/overdue/recompute` (admin)
+
+**cURL**
+```bash
+curl -X POST "$BASE_URL/jobs/overdue/recompute" -H "Authorization: Bearer $ADMIN_TOKEN"
+```
+**200**
+```json
+{ "ok": true, "set_true": 42, "set_false": 17 }
+```
*** End Patch
PATCH

echo "✅ Overdue job wired (migration + job + endpoint + cron + admin button + docs)"
````

**Success check:**

* Run migration:
  `psql "$DATABASE_URL" -f server/migrations/20251022_add_is_overdue.sql`
* Trigger job (admin token):
  `curl -X POST "$BASE_URL/jobs/overdue/recompute" -H "Authorization: Bearer $ADMIN_TOKEN"` → returns `{ ok: true, set_true, set_false }`
* UI (as admin): Tasks header shows **Refresh Overdue**; clicking updates badges.
* Audit log includes `system.overdue.recompute` with counts.

**Next:** wait for user
