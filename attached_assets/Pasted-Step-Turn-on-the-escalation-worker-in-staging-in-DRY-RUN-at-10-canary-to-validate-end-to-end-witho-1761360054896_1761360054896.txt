Step: Turn on the escalation worker in staging in DRY-RUN at 10% canary to validate end-to-end without impacting Slack. (Backend layer → Feature flags; Ops layer → verification)

Why it matters: This safely proves the production-hardened path (indexes, GENERATED column, RBAC/HMAC, metrics, health) before real escalations or CI gating.

Inputs needed: Access to your staging environment vars and app URL.

Command (copy–paste):

# === 1) Enable worker in DRY-RUN with a 10% canary ===
export ESCALATION_WORKER_ENABLED=true
export ESCALATION_V1=true
export ESC_CANARY_PCT=10
export ESC_DRY_RUN=true            # <— no Slack sends, just logs/metrics
export ESC_TICK_MS=60000           # 60s tick
export MAX_ESC_LEVEL=7
export ESC_SNOOZE_MIN=30

# (if not already set for your secured endpoints)
export OPS_HMAC_SECRET="change-me"      # used by HMAC middleware
export OPS_ADMIN_ROLE="ops_admin"       # RBAC role name

# restart staging app / process so flags are picked up
# e.g. pm2 restart, docker compose, or your PaaS restart button

# === 2) Health check (should report enabled and ok/degraded) ===
curl -s https://<staging-host>/ops/escalation/health | jq

# Expect:
# {
#   "enabled": true,
#   "v1": true,
#   "canaryPct": 10,
#   "dryRun": true,
#   "healthStatus": "ok",  // or "degraded" just after boot
#   ...
# }

# === 3) Force at least one due incident for the tick to pick up ===
psql "$DATABASE_URL" -c "
UPDATE incidents
SET status='open', acknowledged_at=NULL, severity='critical',
    first_seen=now() - interval '8 minutes',
    escalation_level=0
WHERE id IN (SELECT id FROM incidents ORDER BY random() LIMIT 1);
"

# Optional: trigger a manual tick via secured endpoint (if you mounted it)
# (include HMAC if your middleware requires it; shown here without for brevity)
curl -X POST -s https://<staging-host>/ops/escalation/tick | jq

# === 4) Verify logs/metrics ===
# In app logs, look for:
#  - escalation_tick_ms
#  - escalations_count (should increment only for incidents included in the 10% canary set)
#  - skipped_canary (should be > 0 if many incidents exist)
#  - (no Slack errors since DRY_RUN=true)


Success check:

/ops/escalation/health shows "enabled": true, "dryRun": true, "canaryPct": 10, and "healthStatus": "ok" within ~2 ticks.

DB shows some incidents with updated escalated_at not changing (since DRY_RUN), but logs show escalation_tick_ms and either escalations_count or skipped_canary increments.

No Slack messages are sent.

Next: wait for user