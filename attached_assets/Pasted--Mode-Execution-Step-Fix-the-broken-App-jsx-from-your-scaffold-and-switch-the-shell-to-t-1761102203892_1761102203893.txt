[Mode: Execution]

**Step:** Fix the broken `App.jsx` from your scaffold and switch the shell to the **Soft Light (Google-ish)** theme with an API health check.

**Why it matters:** Your `App.jsx` got mangled by the shell paste; replacing it and applying the soft theme gives you the clean look you asked for, now.

**Inputs needed:**

* Same Replit workspace running `apps/ui` (Vite)
* Backend reachable at `http://localhost:3000` (proxy will forward `/api/*`)

**Command (paste in Shell):**

```bash
# In case you're not there:
cd ~/workspace/apps/ui

# 1) Ensure Vite proxies API ‚Üí backend (port 3000)
cat > vite.config.js <<'EOF'
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173,
    proxy: { '/api': 'http://localhost:3000' }
  }
})
EOF

# 2) Soft Light theme base CSS
mkdir -p src/styles
cat > src/styles/soft-light.css <<'EOF'
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Soft Light system */
:root { --ring: 0 0 0 3px rgba(66,133,244,.15); }
html, body { height: 100%; }
body { @apply bg-[#f7f8fa] text-[#1f2937] antialiased; }

.soft-card { @apply bg-white rounded-2xl shadow-sm border border-gray-200; }
.soft-panel { @apply bg-[#f7f8fa] rounded-2xl border border-gray-200; }

.btn { @apply inline-flex items-center justify-center h-10 px-4 rounded-xl bg-white border border-gray-200
              hover:bg-gray-100 active:scale-[.99] transition duration-200 ease-out; }
.btn-primary { @apply bg-[#4285F4] text-white border-transparent hover:bg-[#3367d6] shadow; }

.input { @apply h-10 px-3 w-full rounded-xl border border-gray-300 bg-white transition duration-200 ease-out; }
.input:focus { box-shadow: var(--ring); @apply border-[#4285F4]; }

.nav-item { @apply rounded-xl px-3 py-2 text-gray-600 hover:bg-gray-100 hover:text-gray-900 transition; }
.hr { @apply border-t border-gray-200; }
EOF

# 3) Tailwind config (allow src/**/* and index.html)
cat > tailwind.config.js <<'EOF'
/** @type {import('tailwindcss').Config} */
export default {
  content: ["./index.html","./src/**/*.{js,ts,jsx,tsx}"],
  theme: { extend: {} },
  plugins: [],
};
EOF

# 4) Clean, working React entry
# Import the soft theme at the top of your entry (main.jsx or main.tsx)
if [ -f src/main.jsx ]; then ENTRY=src/main.jsx; elif [ -f src/main.tsx ]; then ENTRY=src/main.tsx; else ENTRY=src/main.jsx; fi
grep -q 'soft-light.css' "$ENTRY" 2>/dev/null || sed -i '1i import "./styles/soft-light.css";' "$ENTRY"

# 5) Replace the broken App.jsx with a soft, light dashboard + API health probe
cat > src/App.jsx <<'EOF'
import { useEffect, useState } from "react";

function Stat({label, value, sub}) {
  return (
    <div className="soft-panel p-4">
      <div className="text-sm text-gray-500">{label}</div>
      <div className="text-2xl mt-1">{value}</div>
      {sub && <div className="text-xs text-gray-400 mt-1">{sub}</div>}
    </div>
  );
}

export default function App() {
  const [health, setHealth] = useState(null);
  useEffect(() => {
    fetch("/api/healthz").then(r => r.ok ? r.json() : null).then(setHealth).catch(() => {});
  }, []);

  return (
    <div className="min-h-screen">
      <header className="soft-panel mx-auto max-w-6xl mt-6 p-4 flex items-center justify-between">
        <div className="text-lg font-medium">EDEN ‚Ä¢ Coordination</div>
        <div className="space-x-2">
          <button className="btn">Secondary</button>
          <button className="btn btn-primary">Create Task</button>
        </div>
      </header>

      <main className="mx-auto max-w-6xl p-4 space-y-4">
        <div className="soft-card p-5">
          <div className="text-sm text-gray-500">Dashboard</div>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mt-4">
            <Stat label="Tasks Completed" value="5" sub="last 7 days" />
            <Stat label="In Progress" value="1" sub="now" />
            <Stat label="Overdue" value="0" sub="past due" />
            <Stat label="AI Created" value="0" sub="beta" />
          </div>
        </div>

        <div className="soft-card p-5">
          <div className="flex items-center justify-between">
            <div className="text-sm text-gray-500">Recent Tasks</div>
            <input className="input w-64" placeholder="Search tasks..." />
          </div>
          <div className="hr my-4"></div>
          <div className="grid gap-3">
            <div className="soft-panel p-4 hover:bg-gray-100 transition">
              <div className="text-[15px]">send price to raza</div>
              <div className="text-xs text-gray-500 mt-1">Due 2025-10-22 ‚Ä¢ Coordination ‚Ä¢ High</div>
            </div>
            <div className="soft-panel p-4 hover:bg-gray-100 transition">
              <div className="text-[15px]">book lift with Solid Hook</div>
              <div className="text-xs text-gray-500 mt-1">Due 2025-10-25 ‚Ä¢ Field ‚Ä¢ Normal</div>
            </div>
          </div>
        </div>

        <div className="text-xs text-gray-500">
          API status: {health?.status ?? "probing..."}
        </div>
      </main>
    </div>
  );
}
EOF

# 6) Restart the dev server (use your current port if 5173 is occupied)
pkill -f "vite" || true
npm run dev --silent >/dev/null 2>&1 & disown
echo "üéØ Soft Light UI applied. Re-open the Preview (port printed by Vite)."
```

**Success check:**

* The preview shows a **light, soft UI** (rounded cards, subtle shadows, gentle hover).
* Bottom of the page shows `API status: ok` once `/api/healthz` responds.
* If your preview opened on **5174**, that‚Äôs fine‚ÄîVite auto-selected it because 5173 was busy.

**Next:** wait for user

---

Micro-lesson (UX): that ‚Äúnothing is sharp‚Äù feeling comes from large radii, low-contrast borders, airy spacing, and short **ease-out** transitions. We‚Äôve encoded those as utilities (`soft-card`, `soft-panel`, `btn`, `input`). Once you confirm this vibe, I‚Äôll wire **Projects / Tasks / Reports** to your real endpoints so the softness wraps the working app.
