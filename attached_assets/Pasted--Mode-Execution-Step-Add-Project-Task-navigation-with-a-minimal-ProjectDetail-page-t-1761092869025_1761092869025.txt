[Mode: Execution]

Step: Add **Project → Task navigation** with a minimal **ProjectDetail** page that lists tasks and deep-links into Task Detail.

Why it matters: You’ll be able to click a project, see its tasks, and open a task page to test all the features you just added (comments, uploads, checklist, ball-in-court).

Inputs needed:

* Frontend app: `apps/coordination_ui`
* Existing API endpoints:

  * `GET /api/projects/:projectId`
  * `GET /api/projects/:projectId/tasks`
  * `GET /api/tasks/:taskId`

Command (copy–paste exactly):

1. Add API helpers

```js
// apps/coordination_ui/src/api.js
// …existing exports…
export async function getProject(projectId) {
  const { data } = await api.get(`/projects/${projectId}`);
  return data;
}
export async function listProjectTasks(projectId) {
  const { data } = await api.get(`/projects/${projectId}/tasks`);
  return Array.isArray(data) ? data : (data?.tasks || []);
}
```

2. Create ProjectDetail page

```jsx
// apps/coordination_ui/src/pages/ProjectDetail.jsx
import React from "react";
import { useParams, Link, useNavigate } from "react-router-dom";
import { useQuery } from "@tanstack/react-query";
import { getProject, listProjectTasks } from "../api";

export default function ProjectDetail() {
  const { projectId } = useParams();
  const navigate = useNavigate();

  const { data: project } = useQuery({
    queryKey: ["project", projectId],
    queryFn: () => getProject(projectId),
    enabled: !!projectId
  });

  const { data: tasks = [], isLoading } = useQuery({
    queryKey: ["project_tasks", projectId],
    queryFn: () => listProjectTasks(projectId),
    enabled: !!projectId
  });

  return (
    <div className="mx-auto max-w-6xl p-4 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-xl font-semibold">{project?.name || "Project"}</h1>
          <div className="text-sm text-gray-600">Code: {project?.code}</div>
        </div>
        <button className="text-sm underline" onClick={() => navigate(-1)}>Back</button>
      </div>

      <div className="space-y-2">
        <div className="font-semibold">Tasks</div>
        {isLoading ? (
          <div className="text-sm text-gray-500">Loading…</div>
        ) : tasks.length === 0 ? (
          <div className="text-sm text-gray-500">No tasks yet.</div>
        ) : (
          <ul className="divide-y border rounded bg-white">
            {tasks.map(t => (
              <li key={t.id} className="p-3 flex items-center justify-between">
                <div>
                  <div className="font-medium">{t.title}</div>
                  <div className="text-xs text-gray-500">
                    {t.status} • due {t.due_at ? new Date(t.due_at).toLocaleDateString() : "—"}
                  </div>
                </div>
                <Link
                  className="px-3 py-1 rounded border text-sm"
                  to={`/task/${t.id}`}
                >
                  Open
                </Link>
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
}
```

3. Mount the route in your app router

```jsx
// apps/coordination_ui/src/main.jsx or App.jsx (where your Router is defined)
import { BrowserRouter, Routes, Route } from "react-router-dom";
import ProjectDetail from "./pages/ProjectDetail";
import TaskDetail from "./pages/TaskDetail"; // already created
import EdenHeader from "./components/EdenHeader";

export default function App() {
  return (
    <BrowserRouter>
      <div className="min-h-screen bg-gray-50">
        <EdenHeader />
        <Routes>
          {/* your existing routes… */}
          <Route path="/project/:projectId" element={<ProjectDetail />} />
          <Route path="/task/:taskId" element={<TaskDetail />} />
          {/* keep your project list route as-is (e.g., "/") */}
        </Routes>
      </div>
    </BrowserRouter>
  );
}
```

4. Link projects to the new route
   In your existing **Projects List** component, ensure each project card links to `/project/:projectId`:

```jsx
// wherever you render projects
import { Link } from "react-router-dom";
// …
<Link className="px-3 py-1 rounded border text-sm" to={`/project/${p.id}`}>View</Link>
```

Success check:

* Open your Projects List → click **View** → you land on `/project/<id>`.
* The page shows project code/name and a table of tasks.
* Clicking **Open** on any task goes to `/task/<taskId>`, rendering your Task Detail with checklist, comments, attachments, guest invite, and ball-in-court.
* RBAC: viewer can view; write actions still guarded by backend (you’ll see friendly errors if attempted).

Next: wait for user

When this is green, your “I don’t see front end” problem disappears: you’ll have a clear Project → Task → Detail path. After that, we can add “Basic Reports” (status/owner/overdue tables) as a lightweight page to satisfy the Phase-1 reporting checkbox.
