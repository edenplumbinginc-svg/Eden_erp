[Mode: Execution]

**Step:** Unblock the TLS error by toggling **secure â†’ permissive SSL** behind a flag, then re-run the smoke test.

**Why it matters:** Your server is failing with `SELF_SIGNED_CERT_IN_CHAIN`. On Replit containers this can happen even with a legit cert chain. Weâ€™ll add a **temporary, opt-in** flag that sets `rejectUnauthorized: false` only when enabled. Weâ€™ll harden later by pinning a CA bundle.

**Inputs needed:**

* Edit access to `lib/config-db.js` (your PG client/pool init)

**Command (exact edits):**

1. **Open** `lib/config-db.js` and find where you create the `Pool` or `Client` for `pg` (it likely looks like this):

```js
const { Pool } = require('pg');
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: true } // current secure setting
});
```

2. **Replace** the `ssl` line with this conditional block:

```js
const allowInsecure = String(process.env.DB_SSL_REJECT_UNAUTHORIZED || '').toLowerCase() === 'false';
const ssl = allowInsecure ? { rejectUnauthorized: false } : { rejectUnauthorized: true };

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl
});
```

3. **Add the flag in Replit â†’ ðŸ”’ Secrets**
   Key: `DB_SSL_REJECT_UNAUTHORIZED`
   Value: `false`

This makes the relaxed mode explicit and visible. No silent bypass.

4. **Restart and re-run**:

```bash
pkill -f "node server" 2>/dev/null || true
node server.js > /tmp/server.log 2>&1 & sleep 3
curl -s http://localhost:3000/health || true
tail -40 /tmp/server.log
```

5. **Run the smoke test**:

```bash
bash -lc './prod-smoke.sh'
```

**Success check:**

* `/health` responds, logs show no SSL error.
* Smoke ends with:

```
âœ…âœ…âœ… PASS: transactional writes & event bus verified.
```

**Next:** wait for user

*(Later hardening plan, after weâ€™re green: swap the flag back to secure mode and pin a CA bundle via `PGSSLROOTCERT` or `ssl: { ca: <PEM> }` from Supabaseâ€™s documented chain. For now, this flag lets you deploy and test without getting stuck.)*
