[Mode: Execution]

**Layer/Stage:** Backend ‚Üí Performance API | Spin-Up ‚Üí Modify
**Step:** Expose read-only endpoints for leaderboards/personal stats: `/api/perf/fastest-week`, `/api/perf/dept-month`, `/api/perf/me/recent`.
**Why it matters:** You already log performance events; these APIs make that data consumable by the UI (leaderboards, badges, personal insights).

**Inputs needed:**

* DB migrations for `performance_events` + views in place (done).
* Express server with `requireAuth` middleware.

**Command (exact code to paste):**

1. Create route file:

```ts
// apps/api/src/routes/performance.ts
import { Router } from "express";
import { requireAuth } from "../middleware/auth";
import { db } from "../db";
import { sql } from "drizzle-orm";

const r = Router();

// Top 20 performers this week (uses v_perf_fastest_week)
r.get("/perf/fastest-week", requireAuth, async (_req, res) => {
  const rows = await db.execute(sql`select * from v_perf_fastest_week limit 20`);
  res.json({ items: rows });
});

// Department rankings last 30 days (uses v_perf_dept_month)
r.get("/perf/dept-month", requireAuth, async (_req, res) => {
  const rows = await db.execute(sql`select * from v_perf_dept_month`);
  res.json({ items: rows });
});

// Current user‚Äôs 30 most recent completions (uses base table)
r.get("/perf/me/recent", requireAuth, async (req: any, res) => {
  const uid = req.user?.id;
  if (!uid) return res.status(401).json({ error: "UNAUTHENTICATED" });

  const rows = await db.execute(sql`
    select
      created_at,
      duration_ms,
      department,
      action,
      task_id,
      checklist_item_id
    from performance_events
    where actor_id = ${uid} and action = 'checklist.done'
    order by created_at desc
    limit 30
  `);
  res.json({ items: rows });
});

export default r;
```

2. Wire it into the server:

```ts
// apps/api/src/app.ts (or server.js where routes are mounted)
import performanceRoutes from "./routes/performance";
app.use("/api", performanceRoutes);
```

**Success check:**

```bash
JWT=<valid_user_jwt>

# Top performers this week
curl -s http://localhost:3000/api/perf/fastest-week \
  -H "Authorization: Bearer $JWT" | jq '.items[0]'

# Department rankings
curl -s http://localhost:3000/api/perf/dept-month \
  -H "Authorization: Bearer $JWT" | jq '.items[0]'

# Your recent completions
curl -s http://localhost:3000/api/perf/me/recent \
  -H "Authorization: Bearer $JWT" | jq '.items | length'
```

**Layer/Circling telemetry:**

* Performance Events (DB): ‚úÖ Stable
* Performance API (read): üöÄ Spin-Up ‚Üí Modify (this step)
* UI Leaderboard: ‚è≥ Planned (after API green)

**Next:** wait for user.
