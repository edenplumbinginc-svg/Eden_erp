[Mode: Execution]

Step: Refine **Ball-in-Court** (typed owner + “X days” badge): add `ball_owner_type`, `ball_owner_id`, `ball_since`; auto-set `ball_since` whenever the owner changes; surface in Task API and UI.

Why it matters: Makes handoffs auditable and visible (“who owns the ball, for how long”), which is the core coordination signal.

Inputs needed:

* DB access (`DATABASE_URL`)
* Backend task update handler file (your `routes/tasks.js` or service fn)
* Frontend `TaskDetail.jsx`

Command:

**1) DB migration (idempotent)**

```sql
-- migrations/20251021_ball_owner_fields.sql
ALTER TABLE tasks
  ADD COLUMN IF NOT EXISTS ball_owner_type TEXT CHECK (ball_owner_type IN ('user','vendor','dept','system')) ,
  ADD COLUMN IF NOT EXISTS ball_owner_id   UUID,
  ADD COLUMN IF NOT EXISTS ball_since      TIMESTAMPTZ;

CREATE INDEX IF NOT EXISTS tasks_ball_owner_idx ON tasks (ball_owner_type, ball_owner_id);
```

Run:

```bash
psql "$DATABASE_URL" -f migrations/20251021_ball_owner_fields.sql
```

**2) Backend: auto-set `ball_since` when owner changes**
In your task update path (the one already protected + validated), after you compute the patch:

```js
// inside PATCH /api/tasks/:id handler, before executing UPDATE:
const { ballOwnerType, ballOwnerId } = req.data ?? {}; // adapt to your schema keys
// Detect owner change: if either field is being set and differs from current
let setBallSince = false;
if (ballOwnerType !== undefined || ballOwnerId !== undefined) {
  const current = await getTaskById(taskId); // your existing read
  const typeChanged = ballOwnerType !== undefined && ballOwnerType !== current.ball_owner_type;
  const idChanged   = ballOwnerId   !== undefined && ballOwnerId   !== current.ball_owner_id;
  if (typeChanged || idChanged) setBallSince = true;
}

// Build final patch for SQL/update call
const patch = { ...req.data };
if (setBallSince) {
  patch.ball_owner_type = ballOwnerType ?? current.ball_owner_type ?? null;
  patch.ball_owner_id   = ballOwnerId   ?? current.ball_owner_id   ?? null;
  patch.ball_since      = new Date().toISOString();
}

// then proceed with your existing updateTask(taskId, patch)
const updated = await updateTask(taskId, patch);

// audit
if (setBallSince) {
  await audit(req.user.id, "ball.owner_set", `task:${taskId}`, {
    type: patch.ball_owner_type, id: patch.ball_owner_id, since: patch.ball_since
  });
}
```

**3) Frontend: show “X days” badge**
In `TaskDetail.jsx`, replace your Ball-in-Court component with:

```jsx
function daysSince(ts) {
  if (!ts) return null;
  const ms = Date.now() - new Date(ts).getTime();
  return Math.max(0, Math.floor(ms / (1000*60*60*24)));
}

function BallInCourt({ task }) {
  const type = task?.ball_owner_type || (task?.ballOwnerType ?? null);
  const id   = task?.ball_owner_id   || (task?.ballOwnerId   ?? null);
  const since= task?.ball_since      || (task?.ballSince     ?? null);
  const label = type && id ? `${type}:${id}` : (task?.ball_in_court ?? "—");
  const d = daysSince(since);
  return (
    <div className="flex items-center gap-2">
      <span className="text-sm font-medium">Ball in Court:</span>
      <span className="text-xs px-2 py-0.5 rounded bg-amber-50 border border-amber-300">
        {label}{d !== null ? ` • ${d} day${d===1?"":"s"}` : ""}
      </span>
    </div>
  );
}
```

**4) (Optional) API validation keys**
Extend your Zod `UpdateTaskSchema` to accept typed owner fields:

```js
const UpdateTaskSchema = z.object({
  // …existing fields
  ballOwnerType: z.enum(["user","vendor","dept","system"]).nullable().optional(),
  ballOwnerId: z.string().uuid().nullable().optional(),
});
```

Success check:

* `ALTER TABLE` applied; `tasks` now has the 3 columns.
* Calling `PATCH /api/tasks/:id` with `{"ballOwnerType":"vendor","ballOwnerId":"<uuid>"}` sets those fields and returns `ball_since` freshly set to now.
* Subsequent reads of the task show the badge as: `vendor:<uuid> • 0 days` (and increments over time).
* An `audit_logs` entry `ball.owner_set` appears with type/id/since.

Next: wait for user

Once you confirm, I’ll do the next single step: **upload progress + friendly error banners** on file uploads (pure UI; no backend changes).
