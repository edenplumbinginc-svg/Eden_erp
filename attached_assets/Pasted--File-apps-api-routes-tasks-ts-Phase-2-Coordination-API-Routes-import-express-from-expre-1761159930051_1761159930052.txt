// File: apps/api/routes/tasks.ts
// Phase 2: Coordination API Routes

import express from 'express';
import { db } from '../db/client';
import { tasks, taskLogs, tasksProjects } from '../db/schema';
import { eq } from 'drizzle-orm';

const router = express.Router();

// Create a task
router.post('/tasks', async (req, res) => {
  const {
    title,
    description,
    assigneeId,
    origin = 'UI',
    ballInCourtUserId,
    ballInCourtNote,
    voiceUrl,
    voiceTranscript,
    department,
    projectId,
    linkedProjectIds = [],
  } = req.body;

  try {
    const [task] = await db.insert(tasks).values({
      title,
      description,
      assigneeId,
      origin,
      ballInCourtUserId,
      ballInCourtNote,
      voiceUrl,
      voiceTranscript,
      department,
      projectId,
    }).returning();

    // Multi-project linking
    if (linkedProjectIds.length) {
      await db.insert(tasksProjects).values(
        linkedProjectIds.map(projectId => ({
          taskId: task.id,
          projectId,
        }))
      );
    }

    // Log creation
    await db.insert(taskLogs).values({
      taskId: task.id,
      actorId: req.user?.id,
      action: 'create',
      note: `Created task with title: ${title}`,
    });

    res.status(201).json(task);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to create task' });
  }
});

// Handoff: change ball owner and note
router.post('/tasks/:id/handoff', async (req, res) => {
  const { id } = req.params;
  const { toUserId, note } = req.body;

  try {
    await db.update(tasks).set({
      ballInCourtUserId: toUserId,
      ballInCourtNote: note,
    }).where(eq(tasks.id, id));

    await db.insert(taskLogs).values({
      taskId: id,
      actorId: req.user?.id,
      action: 'handoff',
      note,
    });

    res.status(200).json({ success: true });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to hand off task' });
  }
});

// Get tasks (basic filtering)
router.get('/tasks', async (req, res) => {
  const { origin } = req.query;

  try {
    const result = await db.select().from(tasks)
      .where(origin ? eq(tasks.origin, origin) : undefined);

    res.json(result);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to fetch tasks' });
  }
});

export default router;
