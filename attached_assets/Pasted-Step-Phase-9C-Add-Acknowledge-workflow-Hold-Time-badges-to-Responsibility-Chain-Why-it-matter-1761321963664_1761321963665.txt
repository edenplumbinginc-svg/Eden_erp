Step: Phase 9C — Add Acknowledge workflow + Hold-Time badges to Responsibility Chain.

Why it matters: Acknowledgment confirms the receiver actually caught the ball; hold-time badges surface bottlenecks at a glance (green/yellow/red).

Inputs needed:

DB access (same schema)

Backend Express routes

Frontend already has BallHistoryPanel

Command (paste/apply exactly):

1) DB tweak — store who/when acknowledged

-- drizzle/20251024_ball_ack.sql
ALTER TABLE ball_in_court_events
  ADD COLUMN IF NOT EXISTS acknowledged_at TIMESTAMPTZ,
  ADD COLUMN IF NOT EXISTS acknowledged_by_email TEXT;

-- optional helper view for hold-time between events
CREATE OR REPLACE VIEW v_ball_hold_time AS
SELECT
  e.task_id,
  e.id AS event_id,
  e.from_role,
  e.to_role,
  e.created_at AS handed_at,
  e.acknowledged_at,
  LEAD(e.created_at) OVER (PARTITION BY e.task_id ORDER BY e.created_at) AS next_handoff_at,
  EXTRACT(EPOCH FROM (
    COALESCE(LEAD(e.created_at) OVER (PARTITION BY e.task_id ORDER BY e.created_at), now()) - e.created_at
  ))::bigint AS hold_seconds
FROM ball_in_court_events e;


2) Backend — PATCH acknowledge + include hold-time

// src/routes/ballHistory.ts  (augment existing router)
import { requireAuth } from '../auth/requireAuth';
import { db } from '../db';
import { ball_in_court_events } from '../db/schema';
import { sql } from 'drizzle-orm';

ballHistory.patch('/tasks/:taskId/ball-history/:eventId/ack', requireAuth, async (req, res) => {
  const { taskId, eventId } = req.params;
  const userEmail = req.user?.email; // from your auth middleware
  await db.update(ball_in_court_events)
    .set({ acknowledged: true, acknowledged_at: new Date(), acknowledged_by: userEmail, acknowledged_by_email: userEmail })
    .where(sql`${ball_in_court_events.id} = ${eventId} AND ${ball_in_court_events.task_id} = ${taskId}`);
  res.json({ ok: true });
});

ballHistory.get('/tasks/:id/ball-history', requireAuth, async (req, res) => {
  const taskId = req.params.id;
  // join with view for hold_seconds if available
  const rows = await db.execute(sql`
    SELECT e.*, v.hold_seconds
    FROM ball_in_court_events e
    LEFT JOIN v_ball_hold_time v ON v.event_id = e.id
    WHERE e.task_id = ${taskId}
    ORDER BY e.created_at DESC
  `);
  res.json({ task_id: taskId, events: rows.rows, count: rows.rowCount, ok: true });
});


3) Frontend — API client
File: apps/coordination_ui/src/services/api.js

 export const ballApi = {
   getHistory: (taskId) =>
     api.get(`/api/tasks/${taskId}/ball-history`).then(r => r.data),
+  acknowledge: (taskId, eventId) =>
+    api.patch(`/api/tasks/${taskId}/ball-history/${eventId}/ack`).then(r => r.data),
 };


4) Frontend — UI: add Ack button + hold-time badges
File: apps/coordination_ui/src/components/BallHistoryPanel.jsx

 import React from 'react';
 import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
 import { ballApi } from '../services/api';
 
-function fmtAgo(iso) { ... }
+function fmtAgo(iso) { ... }
+function holdBadge(seconds = 0) {
+  const hrs = Math.floor(seconds / 3600);
+  const label = hrs >= 24 ? `${Math.floor(hrs/24)}d ${hrs%24}h` : `${hrs}h`;
+  const cls =
+    seconds < 48*3600 ? 'bg-green-100 text-green-800' :   // < 2 days
+    seconds < 120*3600 ? 'bg-yellow-100 text-yellow-800' :// < 5 days
+    'bg-red-100 text-red-800';                            // >= 5 days
+  return <span className={`text-xs px-2 py-0.5 rounded ${cls}`}>{label}</span>;
+}
 
 export default function BallHistoryPanel({ taskId }) {
-  const { data, isLoading, error } = useQuery(['ball-history', taskId], () => ballApi.getHistory(taskId), { refetchInterval: 15000 });
+  const qc = useQueryClient();
+  const { data, isLoading, error } = useQuery(['ball-history', taskId], () => ballApi.getHistory(taskId), { refetchInterval: 15000 });
+  const ack = useMutation({
+    mutationFn: ({ eventId }) => ballApi.acknowledge(taskId, eventId),
+    onSuccess: () => qc.invalidateQueries(['ball-history', taskId]),
+  });
 
   ...
           {events.map((e) => (
             <li key={e.id} className="mb-6">
               <span className="absolute -left-2 mt-1 w-3 h-3 rounded-full bg-black" />
               <div className="flex flex-wrap gap-2 items-center">
                 <span className="text-sm">
                   <strong>{e.from_role || '—'}</strong> → <strong>{e.to_role || '—'}</strong>
                 </span>
+                {holdBadge(e.hold_seconds ?? 0)}
                 {e.triggered_by_policy && (
                   <span className="text-xs px-2 py-0.5 rounded bg-gray-100 border">
                     policy: {e.triggered_by_policy}
                   </span>
                 )}
                 {e.reason && <span className="text-xs text-gray-500">({e.reason})</span>}
               </div>
               <div className="text-xs text-gray-600 mt-1">
-                {fmtAgo(e.created_at)} · {e.acknowledged ? `Acknowledged by ${e.acknowledged_by || 'recipient'}` : 'Unacknowledged'}
+                {fmtAgo(e.created_at)} · {e.acknowledged ? `Acknowledged by ${e.acknowledged_by_email || e.acknowledged_by || 'recipient'}` : 'Unacknowledged'}
               </div>
+              {!e.acknowledged && (
+                <div className="mt-2">
+                  <button
+                    className="px-3 py-1 rounded bg-black text-white"
+                    onClick={() => ack.mutate({ eventId: e.id })}
+                    disabled={ack.isLoading}
+                  >
+                    Acknowledge
+                  </button>
+                </div>
+              )}
             </li>
           ))}


5) (Optional) Add “Handoff Ball” action into your task actions
When you confirm a handoff in UI, immediately write to ball_in_court_events and rely on the existing 15s refresh to show it.

Success check:

Open any task → Responsibility Chain now shows a hold-time badge (h/h+d) beside each handoff.

For an unacknowledged entry, clicking Acknowledge flips status without page reload.

API logs show acknowledged_at and acknowledged_by_email populated.

Badges color logic: < 2d green, < 5d yellow, ≥ 5d red.