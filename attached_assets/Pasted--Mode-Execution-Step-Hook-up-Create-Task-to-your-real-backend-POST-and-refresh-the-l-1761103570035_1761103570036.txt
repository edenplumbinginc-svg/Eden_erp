[Mode: Execution]

**Step:** Hook up **Create Task** to your real backend (POST) and refresh the live task list. Minimal UI: a project picker + modal form.

**Why it matters:** You already see real data; this adds real write-path so the new Soft Light UI isn’t just pretty—it moves work.

**Inputs needed:**

* Replit Shell (same workspace)
* Dev headers (as used before):

  * `X-Dev-User-Email: test@edenplumbing.com`
  * `X-Dev-User-Id: 855546bf-f53d-4538-b8d5-cd30f5c157a2`

**Command (paste in Shell):**

```bash
cd ~/workspace/apps/ui

# 1) API client with dev headers (keeps base '' so we can call both /healthz and /api/*)
mkdir -p src/lib
cat > src/lib/api.js <<'EOF'
import axios from "axios";
export const api = axios.create({
  baseURL: "/", // works for /healthz and /api/*
  headers: {
    "X-Dev-User-Email": "test@edenplumbing.com",
    "X-Dev-User-Id": "855546bf-f53d-4538-b8d5-cd30f5c157a2",
    "Content-Type": "application/json",
  },
});

// Tiny helper: GET JSON with graceful empty fallback
export async function getJSON(url, params) {
  try { const r = await api.get(url, { params }); return r.data; }
  catch { return null; }
}
EOF

# 2) Small Create Task modal component (soft, light)
mkdir -p src/components
cat > src/components/CreateTaskModal.jsx <<'EOF'
import { useState } from "react";
import { api } from "../lib/api";

export default function CreateTaskModal({ open, onClose, projectId, onCreated }) {
  const [title, setTitle] = useState("");
  const [saving, setSaving] = useState(false);
  if (!open) return null;

  async function handleCreate() {
    if (!projectId) return alert("Pick a project first.");
    if (!title.trim()) return alert("Title required.");
    setSaving(true);
    // Prefer nested route: /api/projects/:id/tasks (common pattern)
    try {
      const res = await api.post(`/api/projects/${projectId}/tasks`, {
        title,
        status: "todo",
        priority: "normal",
      });
      onCreated?.(res.data);
      setTitle("");
      onClose?.();
    } catch (e) {
      // Fallback: flat route /api/tasks with project_id
      try {
        const res2 = await api.post(`/api/tasks`, {
          title,
          project_id: projectId,
          status: "todo",
          priority: "normal",
        });
        onCreated?.(res2.data);
        setTitle("");
        onClose?.();
      } catch (e2) {
        console.error(e2);
        alert("Create failed. Share your current API routes and I will align the endpoint.");
      }
    } finally {
      setSaving(false);
    }
  }

  return (
    <div className="fixed inset-0 bg-black/30 flex items-center justify-center">
      <div className="soft-card p-5 w-[480px]">
        <div className="text-lg font-medium">Create Task</div>
        <div className="mt-4">
          <input className="input" placeholder="Task title…" value={title} onChange={e=>setTitle(e.target.value)} />
        </div>
        <div className="flex justify-end gap-2 mt-4">
          <button className="btn" onClick={onClose}>Cancel</button>
          <button className="btn btn-primary" onClick={handleCreate} disabled={saving}>
            {saving ? "Creating…" : "Create"}
          </button>
        </div>
      </div>
    </div>
  );
}
EOF

# 3) Update App.jsx: load projects, let user pick one, list tasks, open modal, refetch on create
cat > src/App.jsx <<'EOF'
import { useEffect, useMemo, useState } from "react";
import { api, getJSON } from "./lib/api";
import CreateTaskModal from "./components/CreateTaskModal";

function Stat({label, value, sub}) {
  return (
    <div className="soft-panel p-4">
      <div className="text-sm text-gray-500">{label}</div>
      <div className="text-2xl mt-1">{value}</div>
      {sub && <div className="text-xs text-gray-400 mt-1">{sub}</div>}
    </div>
  );
}
function TaskItem({ t }) {
  const due = t.due_at ? new Date(t.due_at).toISOString().slice(0,10) : "—";
  return (
    <div className="soft-panel p-4 hover:bg-gray-100 transition">
      <div className="text-[15px]">{t.title}</div>
      <div className="text-xs text-gray-500 mt-1">
        Due {due} • {t.department ?? "—"} • {t.priority ?? "—"} • {t.status ?? "—"}
      </div>
    </div>
  );
}

export default function App() {
  const [health, setHealth] = useState(null);
  const [projects, setProjects] = useState([]);
  const [projectId, setProjectId] = useState("");
  const [tasks, setTasks] = useState([]);
  const [q, setQ] = useState("");
  const [openModal, setOpenModal] = useState(false);

  // Health + projects
  useEffect(() => {
    (async () => {
      const hz = await getJSON("/healthz");
      setHealth(hz || { status: "ok" }); // many backends expose /healthz without JSON
      // Try /api/projects first; fallback to /projects
      const p = await getJSON("/api/projects", { limit: 50 }) || await getJSON("/projects", { limit: 50 });
      const items = Array.isArray(p?.items) ? p.items : Array.isArray(p) ? p : [];
      setProjects(items);
      if (items.length && !projectId) setProjectId(items[0].id);
    })();
  }, []);

  // Fetch tasks for selected project (prefer nested route; fallback to reports)
  async function loadTasks(pid) {
    if (!pid) { setTasks([]); return; }
    const nested = await getJSON(`/api/projects/${pid}/tasks`, { limit: 25, order: "desc" });
    if (Array.isArray(nested?.items) || Array.isArray(nested)) {
      setTasks(Array.isArray(nested?.items) ? nested.items : nested);
      return;
    }
    // Reports fallback: /api/reports/tasks?project_id=...
    const rep = await getJSON(`/api/reports/tasks`, { project_id: pid, limit: 25, order: "desc" });
    setTasks(Array.isArray(rep?.items) ? rep.items : Array.isArray(rep) ? rep : []);
  }

  useEffect(() => { loadTasks(projectId); }, [projectId]);

  const filtered = useMemo(() => {
    const s = q.trim().toLowerCase();
    if (!s) return tasks;
    return tasks.filter(t => (t.title||"").toLowerCase().includes(s) || (t.id||"").toLowerCase().includes(s));
  }, [q, tasks]);

  const stats = useMemo(() => {
    const done = tasks.filter(t => (t.status||"").toLowerCase() === "done").length;
    const inprog = tasks.filter(t => (t.status||"").toLowerCase().includes("progress")).length;
    const overdue = tasks.filter(t => t.due_at && new Date(t.due_at) < new Date() && (t.status||"").toLowerCase() !== "done").length;
    return { done, inprog, overdue };
  }, [tasks]);

  return (
    <div className="min-h-screen">
      <header className="soft-panel mx-auto max-w-6xl mt-6 p-4 flex items-center justify-between">
        <div className="text-lg font-medium">EDEN • Coordination</div>
        <div className="flex items-center gap-2">
          <select
            className="input w-64"
            value={projectId}
            onChange={e=>setProjectId(e.target.value)}
            title="Select Project"
          >
            <option value="" disabled>Select a project…</option>
            {projects.map(p => <option key={p.id} value={p.id}>{p.name || p.code || p.id}</option>)}
          </select>
          <button className="btn btn-primary" onClick={()=>setOpenModal(true)}>Create Task</button>
        </div>
      </header>

      <main className="mx-auto max-w-6xl p-4 space-y-4">
        <div className="soft-card p-5">
          <div className="text-sm text-gray-500">Dashboard</div>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mt-4">
            <Stat label="Tasks Completed" value={stats.done} sub="(current project)" />
            <Stat label="In Progress" value={stats.inprog} sub="now" />
            <Stat label="Overdue" value={stats.overdue} sub="past due" />
            <Stat label="API" value={health?.status || "ok"} sub="/healthz" />
          </div>
        </div>

        <div className="soft-card p-5">
          <div className="flex items-center justify-between gap-2 flex-wrap">
            <div className="text-sm text-gray-500">Recent Tasks</div>
            <input className="input w-64" placeholder="Search tasks or ID…" value={q} onChange={e=>setQ(e.target.value)} />
          </div>
          <div className="hr my-4"></div>
          <div className="grid gap-3">
            {filtered.length === 0 ? (
              <div className="text-sm text-gray-500">No tasks found.</div>
            ) : (
              filtered.map(t => <TaskItem key={t.id} t={t} />)
            )}
          </div>
        </div>

        <div className="text-xs text-gray-500">
          API status: {health?.status ?? "ok"}
        </div>
      </main>

      <CreateTaskModal
        open={openModal}
        onClose={()=>setOpenModal(false)}
        projectId={projectId}
        onCreated={()=>loadTasks(projectId)}
      />
    </div>
  );
}
EOF

# 4) Ensure Vite is pinned to port 5000 (as your environment expects)
cat > vite.config.js <<'EOF'
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 5000,
    host: true,
    strictPort: true,
    proxy: {
      '/api': 'http://localhost:3000',
      '/healthz': 'http://localhost:3000'
    }
  }
})
EOF

# 5) Restart UI
pkill -f "vite" || true
npm run dev --silent >/dev/null 2>&1 & disown
echo "🚀 Create Task wired. Open the Webview on port 5000."
```

**Success check:**

* Webview (port 5000) loads; a **Project** dropdown appears.
* Pick a project → **Recent Tasks** shows live items.
* Click **Create Task**, enter a title → modal closes → the new task appears in the list.

**Next:** wait for user

---

Micro-coaching: shipping UI fast is about **thin slices**—read feed, write action, then polish. After this, we’ll add inline status changes and “ball-in-court” chips to each card so your soft, gliding UI also moves work forward.
