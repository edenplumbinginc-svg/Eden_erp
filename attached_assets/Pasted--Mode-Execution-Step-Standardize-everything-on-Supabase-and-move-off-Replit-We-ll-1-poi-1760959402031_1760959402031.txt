[Mode: Execution]

Step: **Standardize everything on Supabase and move off Replit.** We’ll (1) point the app to a single Supabase Postgres, (2) migrate any Neon data, and (3) redeploy: API to Railway (cheap), UI to Vercel (free tier). This stops Replit burn and removes the “two databases” trap.

Why it matters: One database + cheap hosting = no more phantom commits, faster debugging, and your costs drop immediately.

Inputs needed:

* Supabase project URL + `DATABASE_URL`
* Supabase service role key (for future auth/storage, not used in DB URL)
* (If you have data in Neon you care about) Neon connection string

Command (paste in Replit shell **now**, this pins you to Supabase and proves it):

```bash
# 0) Show current shell DB host (just to see where we are)
node -e "console.log('Shell host:', new URL(process.env.DATABASE_URL).host)"

# 1) Set .env to Supabase (paste your SUPABASE DATABASE_URL at the prompt)
read -p "Paste Supabase DATABASE_URL: " SUPA_URL
cp .env .env.bak
( grep -v '^DATABASE_URL=' .env ; echo "DATABASE_URL=$SUPA_URL" ) > .env.tmp && mv .env.tmp .env

# 2) Enforce single-host at boot so drift can’t return
export EXPECTED_DB_HOST=$(node -e "require('dotenv').config({override:true}); console.log(new URL(process.env.DATABASE_URL).host)")

# 3) Restart backend cleanly
pkill -f "node server" 2>/dev/null || true
sleep 1
node server.js > /tmp/server.log 2>&1 & disown
sleep 2

# 4) Verify Node and psql see the SAME DB (hosts match and projects overlap)
echo -e "\n→ Node host:"
node -e "require('dotenv').config({override:true}); console.log(new URL(process.env.DATABASE_URL).host)"

echo -e "\n→ Projects (Node)"
curl -s http://localhost:3000/api/projects -H "X-Dev-Email: admin@edenmep.ca" | jq '.[0:5] | .[] | {id,name}'

echo -e "\n→ Projects (psql)"
PSQL_PAGER=cat psql "$DATABASE_URL" -X -P pager=off -c "select id,name from projects order by created_at desc limit 5;"

# 5) Quick transactional smoke: create a task and confirm both task+notification exist (same DB)
PROJECT_ID=$(psql "$DATABASE_URL" -X -t -A -c "select id from projects order by created_at desc limit 1;")
TASK_JSON=$(curl -s -X POST "http://localhost:3000/api/projects/$PROJECT_ID/tasks" \
  -H "Content-Type: application/json" -H "X-Dev-Email: admin@edenmep.ca" \
  -d '{"title":"Post-Supabase-Pin","priority":"high"}')
echo "$TASK_JSON" | jq .
TASK_ID=$(echo "$TASK_JSON" | jq -r '.id')
sleep 2
echo -e "\nTask row:"; PSQL_PAGER=cat psql "$DATABASE_URL" -X -P pager=off -c "select id,title from tasks where id='$TASK_ID';"
echo -e "\nNotifications:"; PSQL_PAGER=cat psql "$DATABASE_URL" -X -P pager=off -c "select type,payload->>'title' as title from notifications where task_id='$TASK_ID' order by created_at desc limit 5;"
```

Success check:

* The **Node host** and psql host are identical (Supabase).
* Node and psql show the same project IDs.
* The smoke creates a task and you see **both** the task row and at least one notification row.

Next: wait for user

---

### Quick answers to your concerns

* **Supabase vs Neon:** You kept hearing Supabase because that’s the long-term platform (DB + Auth + Storage). Neon crept in during early experiments. We end that now: **choose Supabase, retire Neon**.
* **Getting off Replit:** After the command above is green, deploy:

  * **API** → Railway ($5–$10/mo) or Render free tier to start.
  * **UI** → Vercel (free).
  * **DB/Auth/Storage** → Supabase (keep using).
* **Cost:** This setup typically lands **<$30/month** for staging; scale as needed later. Your “$300/week” Replit spend goes to ~$0 while building.

---

### If you need to migrate Neon data → Supabase later

Run this locally (not on Replit) when you’re ready:

```bash
# Export from Neon
pg_dump "$NEON_DATABASE_URL" --no-owner --no-privileges -Fc -f neon.dump

# Import into Supabase
pg_restore --no-owner --no-privileges -d "$SUPABASE_DATABASE_URL" neon.dump
```

(We can do a selective table copy if you only want projects/tasks.)

---

Locking to Supabase, moving API to Railway, and UI to Vercel is the clean, inexpensive path forward. This also aligns with your Phase-2/3 roadmap (auth, storage, emails) without more tooling churn.
