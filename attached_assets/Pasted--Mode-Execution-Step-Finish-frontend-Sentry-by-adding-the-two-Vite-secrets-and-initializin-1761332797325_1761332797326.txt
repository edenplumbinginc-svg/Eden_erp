[Mode: Execution]

Step: Finish **frontend Sentry** by adding the two Vite secrets and initializing Sentry at the top of `apps/coordination_ui/src/main.jsx`.

Why it matters: This completes Phase 10 (end-to-end). UI errors and slow interactions will link to your backend traces, so you can diagnose the full story fast.

Inputs needed:

* Your Sentry DSN (you can reuse the backend one)
* File access to `apps/coordination_ui/src/main.jsx`

Command:

1. In Replit â†’ ðŸ”’ **Secrets**, add:

   * **Key:** `VITE_SENTRY_DSN` â†’ **Value:**

     ```
     https://8b174be90c2b6c1056af95d7d162faa0@o4510245656526848.ingest.us.sentry.io/4510245665046528
     ```
   * **Key:** `VITE_SENTRY_ENV` â†’ **Value:**

     ```
     production
     ```

2. Install the SDK in the UI app (from repo root or `apps/coordination_ui`):

```bash
npm --workspace apps/coordination_ui install @sentry/react
```

3. Edit **`apps/coordination_ui/src/main.jsx`** â€” add this at the very top (before React renders):

```jsx
import * as Sentry from "@sentry/react";

Sentry.init({
  dsn: import.meta.env.VITE_SENTRY_DSN,
  environment: import.meta.env.VITE_SENTRY_ENV || "development",
  integrations: [
    Sentry.browserTracingIntegration(),
    Sentry.replayIntegration({ maskAllText: false, blockAllMedia: false }),
  ],
  tracesSampleRate: 0.2,          // keep modest for perf
  replaysSessionSampleRate: 0.05, // 5% of sessions
  replaysOnErrorSampleRate: 1.0,  // record when an error occurs
});
```

4. Wrap the app with an error boundary (still in `main.jsx`):

```jsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";

const Fallback = () => (
  <div style={{ padding: 16 }}>
    Something went wrong. Weâ€™ve logged it and will fix it quickly.
  </div>
);

ReactDOM.createRoot(document.getElementById("root")).render(
  <Sentry.ErrorBoundary fallback={<Fallback />}>
    <App />
  </Sentry.ErrorBoundary>
);
```

Success check:

* Hard refresh the UI (âŒ˜/Ctrl+Shift+R).
* Temporarily trigger a UI error (add inside any componentâ€™s `useEffect` or button handler, test then remove):

  ```js
  throw new Error("Frontend test crash: boom ðŸ’¥");
  ```
* In Sentry (same project), you should see a new issue from **React** with environment `production`.
* Open your browser DevTools â†’ **Network** on an API call; response headers should include:

  * `sentry-trace` and `baggage` (present on sampled requests)
  * `X-Request-Id` (always present), which will match backend logs for that call.

Next: wait for user.
