[Mode: Execution]
Step: Add A11y + visual snapshot gates and a minimal auth-bypass for tests so routes can mount in CI.
Layer: Frontend layer → Quality gates (active).
Why it matters: The tests can’t verify routes if auth blocks them; a guarded, test-only bypass plus axe + snapshots turns route coverage into enforceable quality.

Inputs needed: Repo open; ability to edit router/auth guard, add tests, and tweak Playwright config.

Command:

1. Install axe-core for Playwright.

```bash
npm i -D @axe-core/playwright
```

2. Add a tiny, test-only auth bypass (safe: opt-in via env or query).
   In your auth gate (where you redirect unauthenticated users), add this **before** redirect logic:

```ts
// e2e bypass: only active when explicitly enabled
const e2eBypass =
  import.meta.env.VITE_E2E === "true" ||
  (typeof window !== "undefined" && new URLSearchParams(window.location.search).has("e2e"));

// If auth required and user not logged in, skip redirect when e2e bypass is on
if (requiresAuth && !user && e2eBypass) {
  // allow route to mount for tests
} else if (requiresAuth && !user) {
  // your existing redirect to /login
}
```

Create `.env.test`:

```
VITE_E2E=true
```

3. (Optional but helpful) Freeze motion during visual tests to reduce flake.
   `public/test-freeze.css`

```css
* { transition-duration: 1ms !important; animation-duration: 1ms !important; }
```

4. A11y smoke spec.
   `tests/a11y-smoke.spec.ts`

```ts
import { test, expect } from "@playwright/test";
import { injectAxe, checkA11y } from "@axe-core/playwright";
import { ROUTES } from "../src/routes.manifest";

const STATIC_ROUTES = ROUTES.filter(r => !r.path.includes(":"));

for (const r of STATIC_ROUTES) {
  test.describe(`a11y: ${r.path}`, () => {
    test(`no critical violations on ${r.path}`, async ({ page, context }) => {
      await context.addCookies([{ name: "e2e", value: "1", url: "http://localhost:5173" }]);
      await page.addStyleTag({ path: "public/test-freeze.css" }).catch(() => {});
      await page.goto(`http://localhost:5173${r.path}?e2e=1`);
      await injectAxe(page);
      await checkA11y(page, undefined, {
        detailedReport: true,
        detailedReportOptions: { html: true },
        axeOptions: { runOnly: ["wcag2a", "wcag2aa"] },
      });
      if (r.critical) {
        await expect(page.locator("main, [role=main], body")).toBeVisible();
      }
    });
  });
}
```

5. Visual snapshot spec (light + dark).
   `tests/visual-routes.spec.ts`

```ts
import { test, expect } from "@playwright/test";
import { ROUTES } from "../src/routes.manifest";

const STATIC_ROUTES = ROUTES.filter(r => !r.path.includes(":"));

for (const scheme of ["light", "dark"] as const) {
  test.describe(`visual (${scheme})`, () => {
    test.use({ colorScheme: scheme });

    for (const r of STATIC_ROUTES) {
      test(`snapshot: ${scheme} ${r.path}`, async ({ page, context }) => {
        await context.addCookies([{ name: "e2e", value: "1", url: "http://localhost:5173" }]);
        await page.addStyleTag({ path: "public/test-freeze.css" }).catch(() => {});
        await page.goto(`http://localhost:5173${r.path}?e2e=1`);
        await page.waitForTimeout(150); // settle micro-motions
        await expect(page).toHaveScreenshot(
          `${scheme}${r.path.replace(/\W+/g, "_")}.png`,
          { fullPage: true, maxDiffPixelRatio: 0.01 }
        );
      });
    }
  });
}
```

6. Playwright config tweaks (baseURL + env).
   In `playwright.config.ts` (or `.mjs`) add:

```ts
import { defineConfig } from "@playwright/test";

export default defineConfig({
  use: {
    baseURL: "http://localhost:5173",
    viewport: { width: 1280, height: 800 },
  },
  // Optionally load .env.test when running tests
});
```

Run your dev server with `VITE_E2E=true` during tests, or pass the query `?e2e=1` as shown.

7. Scripts.
   `package.json`

```json
{
  "scripts": {
    "test:routes": "playwright test tests/routes-smoke.spec.ts",
    "test:a11y": "playwright test tests/a11y-smoke.spec.ts",
    "test:visual": "playwright test tests/visual-routes.spec.ts",
    "test:quality": "npm run test:routes && npm run test:a11y && npm run test:visual"
  }
}
```

Success check:

1. Run dev server with test env (in one terminal): `VITE_E2E=true npm run dev`.
2. In another terminal: `npm run test:a11y` → either zero violations or actionable list.
3. `npm run test:visual` → creates baseline images; re-run to confirm it detects diffs.
4. `npm run test:quality` → passes locally; wire it into CI to block merges on regressions.

Next: wait for user.

Mini-lesson: test bypasses must be explicit, reversible, and narrow. An env/query gate plus no-op branch in the guard lets CI observe pages without weakening real auth. Keep the axe rules strict early; relax snapshot thresholds only where font rasterization or live data causes tiny, acceptable drift.
