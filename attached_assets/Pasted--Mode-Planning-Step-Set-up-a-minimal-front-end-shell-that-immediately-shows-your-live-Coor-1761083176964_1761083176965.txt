[Mode: Planning]

Step: Set up a **minimal front-end shell** that immediately shows your live Coordination data (projects, tasks, attachments) so you can test workflows and give feedback while we keep backend iterations running.

Why it matters: you’ve built a world-class backend — but testing logic, flow, and “ball-in-court” rules visually speeds up refinement 10×. You don’t need full UX polish yet, just working pages that read/write via your APIs.

---

### 💡 The Fastest Path to a Visual Front-End

We don’t rebuild the whole ERP UI yet — we scaffold a small React client (Replit or local) that consumes your live Express endpoints.

**Stack proposal**

* **React + Vite** (lightweight, fast hot-reload)
* **TailwindCSS** for quick layout
* **TanStack Query (React-Query)** for API calls and caching
* **Axios** for requests (already fits your backend’s JSON)
* **Shadcn/UI** (if you want consistent design later)

**Scope for now (1–2 hours total):**

1. `ProjectsList` → fetch `/api/projects`
2. `TasksList` → fetch `/api/projects/:id/tasks`
3. `TaskDetail` → show title, description, comments, attachments
4. `CommentBox` → POST `/api/tasks/:id/comments`
5. `AttachmentList` → show file names + upload/delete buttons
6. `LoginDevHeader` → text fields for “Dev-User Email/ID” headers (simulate auth)

---

### ⚙️ Command sequence to spin it up

```bash
# 1) Create new front-end app (in same workspace or /client folder)
npm create vite@latest eden-erp-client -- --template react
cd eden-erp-client
npm i axios @tanstack/react-query tailwindcss postcss autoprefixer
npx tailwindcss init -p

# 2) Configure tailwind.config.js
content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"]

# 3) In src/api.js
import axios from "axios";
export const api = axios.create({
  baseURL: "http://localhost:3000/api",
  headers: { "Content-Type": "application/json" }
});

export function setDevUser(email, id) {
  api.defaults.headers["X-Dev-User-Email"] = email;
  api.defaults.headers["X-Dev-User-Id"] = id;
}
```

Then start tiny pages:

```jsx
// src/App.jsx
import { useQuery } from "@tanstack/react-query";
import { api, setDevUser } from "./api";
import { useState } from "react";

export default function App() {
  const [email, setEmail] = useState("test@edenplumbing.com");
  const [id, setId] = useState("855546bf-f53d-4538-b8d5-cd30f5c157a2");
  setDevUser(email, id);

  const { data: projects } = useQuery({
    queryKey: ["projects"],
    queryFn: async () => (await api.get("/projects")).data
  });

  return (
    <div className="p-6 space-y-6">
      <h1 className="text-2xl font-bold">EDEN Coordination</h1>
      <div className="flex gap-2">
        <input value={email} onChange={e=>setEmail(e.target.value)} className="border p-1"/>
        <input value={id} onChange={e=>setId(e.target.value)} className="border p-1 w-96"/>
      </div>
      <ul className="list-disc ml-4">
        {projects?.map(p => (
          <li key={p.id} className="border-b py-2">
            <strong>{p.name}</strong> – {p.status}
          </li>
        ))}
      </ul>
    </div>
  );
}
```

Start it:

```bash
npm run dev
# open http://localhost:5173
```

Within minutes you’ll see your live backend data in a list.
From here we can layer tabs for **Tasks**, **Comments**, **Attachments**, etc., each reusing your validated routes.

---

### 🧭 Strategy going forward

1. **Today:** spin up this front-end shell (1–2 h) — confirm it pulls live data.
2. **Tomorrow:** wire Tasks, Comments, Attachments pages (another 1–2 h).
3. **After that:** style lightly (Tailwind), then you start *functional testing*.
4. **Later:** convert dev-headers → real login endpoint once auth UI is built.

---

Success check:

* `npm run dev` shows project list from `/api/projects`
* Clicking project displays tasks (simple GET)
* Creating a comment hits your real backend and logs in `audit_logs`
* You can test permission flows by swapping Dev-User Email/ID

Next: wait for user

Would you like me to generate the **exact ready-to-paste React files** (App.jsx + Projects + Tasks + Comments components + API client)? That way you can run it immediately and start testing.
