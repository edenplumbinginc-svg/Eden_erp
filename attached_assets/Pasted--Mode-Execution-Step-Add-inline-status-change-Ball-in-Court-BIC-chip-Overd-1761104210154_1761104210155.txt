[Mode: Execution]

**Step:** Add **inline status change** + **Ball-in-Court (BIC) chip** + **Overdue badge** to the Soft Light UI task cards (read+write, optimistic updates).

**Why it matters:** You can now move work directly from the dashboard without drilling in — the UI stops being a pretty read-only feed and becomes your daily driver.

**Inputs needed:**

* Same Replit workspace (UI on port 5000, backend on 3000)
* Dev headers already set in `src/lib/api.js`

**Command (paste in Shell):**

```bash
cd ~/workspace/apps/ui

# 1) Small status control and BIC chip components
mkdir -p src/components

cat > src/components/StatusSelect.jsx <<'EOF'
import { useState } from "react";
import { api } from "../lib/api";

// Flexible update: tries nested route then flat
async function patchTask(id, payload, projectId) {
  // Prefer /api/tasks/:id
  try {
    const r = await api.patch(`/api/tasks/${id}`, payload);
    return r.data;
  } catch {}
  // Fallback: /api/projects/:pid/tasks/:id
  if (projectId) {
    try {
      const r = await api.patch(`/api/projects/${projectId}/tasks/${id}`, payload);
      return r.data;
    } catch {}
  }
  throw new Error("Update failed (no compatible endpoint). Share your current routes and I’ll align it.");
}

export default function StatusSelect({ task, projectId, onChange }) {
  const [value, setValue] = useState(task.status || "todo");
  const [saving, setSaving] = useState(false);
  const options = [
    { k: "todo",      label: "To do" },
    { k: "in_progress", label: "In progress" },
    { k: "blocked",   label: "Blocked" },
    { k: "done",      label: "Done" },
    { k: "cancelled", label: "Cancelled" },
  ];

  async function handleChange(e) {
    const next = e.target.value;
    setValue(next);            // optimistic
    setSaving(true);
    try {
      const updated = await patchTask(task.id, { status: next }, projectId);
      onChange?.(updated || { ...task, status: next });
    } catch (err) {
      console.error(err);
      alert("Could not update status.");
      setValue(task.status || "todo"); // rollback
    } finally {
      setSaving(false);
    }
  }

  return (
    <select
      className="input h-9 w-[170px]"
      value={value}
      onChange={handleChange}
      disabled={saving}
      title="Change status"
    >
      {options.map(o => <option key={o.k} value={o.k}>{o.label}</option>)}
    </select>
  );
}
EOF

cat > src/components/BICChip.jsx <<'EOF'
export default function BICChip({ value }) {
  const text = value || "Unassigned";
  return (
    <span className="inline-flex items-center px-2.5 h-7 rounded-full bg-gray-100 text-gray-700 text-xs border border-gray-200">
      <span className="w-1.5 h-1.5 rounded-full bg-blue-500 mr-1.5" />
      {text}
    </span>
  );
}
EOF

# 2) Update App.jsx: render status select, BIC chip, and Overdue badge
applypatch << 'PATCH'
*** Begin Patch
*** Update File: src/App.jsx
@@
-import { useEffect, useMemo, useState } from "react";
+import { useEffect, useMemo, useState } from "react";
 import { api, getJSON } from "./lib/api";
 import CreateTaskModal from "./components/CreateTaskModal";
+import StatusSelect from "./components/StatusSelect";
+import BICChip from "./components/BICChip";
 
 function Stat({label, value, sub}) {
   return (
     <div className="soft-panel p-4">
       <div className="text-sm text-gray-500">{label}</div>
       <div className="text-2xl mt-1">{value}</div>
       {sub && <div className="text-xs text-gray-400 mt-1">{sub}</div>}
     </div>
   );
 }
-function TaskItem({ t }) {
-  const due = t.due_at ? new Date(t.due_at).toISOString().slice(0,10) : "—";
-  return (
-    <div className="soft-panel p-4 hover:bg-gray-100 transition">
-      <div className="text-[15px]">{t.title}</div>
-      <div className="text-xs text-gray-500 mt-1">
-        Due {due} • {t.department ?? "—"} • {t.priority ?? "—"} • {t.status ?? "—"}
-      </div>
-    </div>
-  );
-}
+function OverdueBadge({ due_at, status }) {
+  if (!due_at) return null;
+  const overdue = new Date(due_at) < new Date() && String(status).toLowerCase() !== "done";
+  if (!overdue) return null;
+  return (
+    <span className="inline-flex items-center px-2 h-6 rounded-full bg-red-50 text-red-700 text-xs border border-red-200">
+      Overdue
+    </span>
+  );
+}
+
+function TaskItem({ t, projectId, onChanged }) {
+  const dueISO = t.due_at ? new Date(t.due_at).toISOString().slice(0,10) : "—";
+  return (
+    <div className="soft-panel p-4 hover:bg-gray-100 transition">
+      <div className="flex items-start justify-between gap-3">
+        <div>
+          <div className="text-[15px]">{t.title}</div>
+          <div className="mt-1 flex items-center gap-2">
+            <BICChip value={t.ball_in_court || t.bic} />
+            <OverdueBadge due_at={t.due_at} status={t.status} />
+          </div>
+          <div className="text-xs text-gray-500 mt-1">
+            Due {dueISO} • {t.department ?? "—"} • {t.priority ?? "—"} • ID {t.id.slice(0,8)}
+          </div>
+        </div>
+        <StatusSelect task={t} projectId={projectId} onChange={onChanged} />
+      </div>
+    </div>
+  );
+}
@@
   async function loadTasks(pid) {
     if (!pid) { setTasks([]); return; }
     const nested = await getJSON(`/api/projects/${pid}/tasks`, { limit: 25, order: "desc" });
     if (Array.isArray(nested?.items) || Array.isArray(nested)) {
-      setTasks(Array.isArray(nested?.items) ? nested.items : nested);
+      setTasks(Array.isArray(nested?.items) ? nested.items : nested);
       return;
     }
     // Reports fallback: /api/reports/tasks?project_id=...
     const rep = await getJSON(`/api/reports/tasks`, { project_id: pid, limit: 25, order: "desc" });
     setTasks(Array.isArray(rep?.items) ? rep.items : Array.isArray(rep) ? rep : []);
   }
@@
           <div className="grid gap-3">
             {filtered.length === 0 ? (
               <div className="text-sm text-gray-500">No tasks found.</div>
             ) : (
-              filtered.map(t => <TaskItem key={t.id} t={t} />)
+              filtered.map(t => (
+                <TaskItem
+                  key={t.id}
+                  t={t}
+                  projectId={projectId}
+                  onChanged={(updated)=>{
+                    // Merge updated task back into list
+                    setTasks(prev => prev.map(x => x.id === (updated?.id || t.id) ? { ...x, ...(updated || {}) } : x));
+                  }}
+                />
+              ))
             )}
           </div>
         </div>
*** End Patch
PATCH

# 3) Restart the UI (port 5000)
pkill -f "vite" || true
npm run dev --silent >/dev/null 2>&1 & disown
echo "✅ Inline status + BIC + Overdue added. Refresh your Webview (port 5000)."
```

**Success check:**

* Each task card shows:

  * A **status dropdown** (To do / In progress / Blocked / Done / Cancelled).
  * A **BIC chip** (Ball-in-Court) pulled from `ball_in_court` or `bic`.
  * An **Overdue** badge for past-due, not-done tasks.
* Changing status updates immediately (optimistic) and persists via PATCH. A brief revert happens if the API rejects it.
* Stats at the top update as you toggle statuses.

**Next:** wait for user

---

Tiny product lesson: this is “control where you read” — small inline edits keep users in flow. Once this feels good, we’ll tackle Phase-2 automation #1 (auto-complete parent when all subtasks done). That will be a single backend hook so your new UI gets “Done” for free when the last child flips.
