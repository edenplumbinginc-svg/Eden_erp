[Mode: Execution]

Step: Implement Sentry error tracking in Express and emit a test event.

Why it matters: Captures runtime errors and traces automatically so deploy and production failures surface instantly.

Inputs needed:

* SENTRY_DSN (as an env/secret)
* Your Express entry file (path)
* `package.json` (to add scripts)

Command:

```bash
# 1) Install
npm i @sentry/node @sentry/profiling-node

# 2) Set env (example — use your platform’s secret manager)
# export SENTRY_DSN="https://<key>@o<org>.ingest.sentry.io/<project>"
```

Add at the very top of your server entry (before routes/middleware):

```js
// sentry-init (top of file)
import * as Sentry from "@sentry/node";
import { nodeProfilingIntegration } from "@sentry/profiling-node";

Sentry.init({
  dsn: process.env.SENTRY_DSN,
  environment: process.env.NODE_ENV || "development",
  integrations: [nodeProfilingIntegration()],
  tracesSampleRate: 0.2,
  profilesSampleRate: 0.2,
});

// request + tracing handlers FIRST
app.use(Sentry.Handlers.requestHandler());
app.use(Sentry.Handlers.tracingHandler());

// optional: one-time boot signal (remove later)
if (process.env.SENTRY_DSN) Sentry.captureMessage("SENTRY_INIT_OK");
```

Place after your routes, before your own final error handler:

```js
// Sentry error handler
app.use(Sentry.Handlers.errorHandler());

// (keep your own error responder)
app.use((err, req, res, next) => {
  const status = err.status || 500;
  res.status(status).json({ error: "internal_error", status });
});
```

(Optional quick test route; remove later):

```js
app.get("/__boom", (_req, _res) => {
  throw new Error("Manual test error");
});
```

Add an npm script to make a quick smoke:

```json
{
  "scripts": {
    "sentry:test": "node -e \"require('@sentry/node').captureMessage('SENTRY_SCRIPT_OK')\""
  }
}
```

Success check:

* Start the server, hit `GET /__boom` once → A new issue appears in Sentry.
* You also see `SENTRY_INIT_OK` (or `SENTRY_SCRIPT_OK` if you ran the script) in Sentry events.

Next: wait for user

— Paste your **server entry file** and **package.json** here. I’ll patch them in-place (add only what’s needed, delete what isn’t) and then we’ll proceed to Step 2 (60s uptime ping) and Step 3 (post-deploy gate + `.replit` binding).
