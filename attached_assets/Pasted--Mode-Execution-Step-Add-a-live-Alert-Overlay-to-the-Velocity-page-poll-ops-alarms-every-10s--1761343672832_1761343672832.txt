[Mode: Execution]

Step: Add a live Alert Overlay to the Velocity page: poll /ops/alarms every 10s, show a global “Current Alerts” drawer, and per-row badges (warning/critical). (Layer: Velocity → UI)

Why it matters: The dashboard now surfaces trouble automatically — you’ll see which routes are burning without scanning numbers.

Inputs needed:

Frontend repo (apps/coordination_ui)

Working /ops/alarms endpoint

Command:

Patch apps/coordination_ui/src/pages/Velocity.jsx to fetch alarms, render a drawer, and per-row badges.

@@
-import { useEffect, useMemo, useState } from "react";
+import { useEffect, useMemo, useState } from "react";
 
 function fmt(n) {
   if (n === null || n === undefined) return "—";
   if (typeof n === "number" && !Number.isInteger(n)) return n.toFixed(3);
   return String(n);
 }
@@
 export default function Velocity() {
   const [snap, setSnap] = useState(null);      // from /ops/metrics
   const [trends, setTrends] = useState(null);  // from /ops/metrics/trends
+  const [alarms, setAlarms] = useState(null);  // from /ops/alarms
   const [err, setErr] = useState(null);
   const [sortBy, setSortBy] = useState("rps");
   const [desc, setDesc] = useState(true);
   const [since, setSince] = useState(null);
+  const [showAlerts, setShowAlerts] = useState(false);
 
   async function fetchMetrics() {
     try {
-      const [a, b] = await Promise.all([
+      const [a, b, c] = await Promise.all([
         fetch("/ops/metrics", { cache: "no-store" }),
         fetch("/ops/metrics/trends", { cache: "no-store" }),
+        fetch("/ops/alarms", { cache: "no-store" }),
       ]);
       if (!a.ok) throw new Error(`/ops/metrics HTTP ${a.status}`);
       if (!b.ok) throw new Error(`/ops/metrics/trends HTTP ${b.status}`);
-      const j1 = await a.json();
-      const j2 = await b.json();
+      if (!c.ok) throw new Error(`/ops/alarms HTTP ${c.status}`);
+      const j1 = await a.json();   // snapshot
+      const j2 = await b.json();   // trends
+      const j3 = await c.json();   // alarms
       setSnap(j1);
       setTrends(j2);
+      setAlarms(j3);
       setErr(null);
       setSince(new Date().toLocaleTimeString());
     } catch (e) {
       setErr(e.message || String(e));
     }
   }
 
   useEffect(() => {
     fetchMetrics();
-    const id1 = setInterval(fetchMetrics, 10_000); // match 10s bucket
+    const id1 = setInterval(fetchMetrics, 10_000); // match 10s bucket
     return () => clearInterval(id1);
   }, []);
 
+  // Map alarms by route for quick lookup
+  const alarmIndex = useMemo(() => {
+    const idx = new Map();
+    const list = alarms?.alarms || [];
+    for (const a of list) {
+      if (!idx.has(a.route)) idx.set(a.route, []);
+      idx.get(a.route).push(a);
+    }
+    return idx;
+  }, [alarms]);
+
   const rows = useMemo(() => {
     if (!snap?.routes) return [];
     const out = [];
     for (const [route, wins] of Object.entries(snap.routes)) {
       const w1 = wins["1m"] || {};
       const tSeries = trends?.routes?.[route]?.series || [];
@@
       out.push({
         route,
         rps: w1.rps ?? 0,
         p50_ms: w1.p50_ms ?? null,
         p95_ms: w1.p95_ms ?? null,
         err_rate: w1.err_rate ?? 0,
         count: w1.count ?? 0,
         trend: tSeries,
         regress_abs,
         regress_pct,
         is_regress,
+        alarms: alarmIndex.get(route) || [],
       });
     }
     return out.sort((a, b) => {
       const va = a[sortBy] ?? -Infinity;
       const vb = b[sortBy] ?? -Infinity;
       return desc ? (vb - va) : (va - vb);
     });
-  }, [snap, trends, sortBy, desc]);
+  }, [snap, trends, alarmIndex, sortBy, desc]);
@@
   return (
     <div className="p-6 space-y-4">
       <div className="flex items-center justify-between">
         <h1 className="text-2xl font-semibold">Velocity Dashboard</h1>
         <div className="text-sm opacity-70">
           Env: {snap?.env ?? "—"} • Generated: {snap?.generated_at ?? "—"} • Last fetch: {since ?? "—"}
         </div>
       </div>
 
+      {/* Alerts bar */}
+      <div className="flex items-center justify-between">
+        <div>
+          {alarms?.alarms?.length
+            ? <span className="inline-flex items-center gap-2 px-3 py-1 rounded-lg border bg-amber-50 text-amber-800 border-amber-200">
+                ⚠️ Current Alerts: <b>{alarms.alarms.length}</b>
+              </span>
+            : <span className="inline-flex items-center gap-2 px-3 py-1 rounded-lg border bg-green-50 text-green-700 border-green-200">
+                ✅ No active alerts
+              </span>}
+        </div>
+        <button
+          className="px-3 py-1.5 rounded-lg border hover:bg-gray-50"
+          onClick={() => setShowAlerts(true)}
+          disabled={!alarms?.alarms?.length}
+          title="Show current alerts"
+        >
+          View Alerts
+        </button>
+      </div>
+
       {err && (
         <div className="p-3 rounded-md bg-red-50 text-red-700 border border-red-200">
           Failed to load metrics: {err}
         </div>
       )}
@@
           <thead className="bg-gray-50">
             <tr>
               {header("Route", "route")}
               {header("RPS (1m)", "rps")}
               {header("p50 ms (1m)", "p50_ms")}
               {header("p95 ms (1m)", "p95_ms")}
               {header("Error % (1m)", "err_rate")}
               {header("Samples (1m)", "count")}
+              <th className="px-3 py-2">Alerts</th>
               <th className="px-3 py-2">p95 (5m)</th>
               <th className="px-3 py-2">RPS (5m)</th>
               {header("Regress % (p95)", "regress_pct")}
               <th className="px-3 py-2">Trace</th>
             </tr>
           </thead>
           <tbody>
@@
-                <td className="px-3 py-2">{fmt(r.count)}</td>
+                <td className="px-3 py-2">{fmt(r.count)}</td>
+                <td className="px-3 py-2">
+                  {r.alarms.length ? (
+                    <div className="flex flex-wrap gap-1">
+                      {r.alarms.map((a, i) => (
+                        <span key={i}
+                          className={`inline-flex items-center gap-1 px-2 py-0.5 rounded-full text-xs border
+                            ${a.severity === "critical" ? "bg-red-100 text-red-700 border-red-200"
+                                                       : "bg-amber-100 text-amber-800 border-amber-200"}`}>
+                          {a.kind === "error_rate" ? "errors" : "p95↑"} {a.severity}
+                        </span>
+                      ))}
+                    </div>
+                  ) : "—"}
+                </td>
                 <td className="px-3 py-1">
                   <Sparkline
                     points={r.trend}
                     accessor={(b)=>b?.p95_ms}
                     title={`p95 (5m) ${r.route}`}
                   />
                 </td>
@@
         </table>
       </div>
 
+      {/* Alerts Drawer */}
+      {showAlerts && (
+        <div className="fixed inset-0 z-50">
+          <div className="absolute inset-0 bg-black/30" onClick={() => setShowAlerts(false)} />
+          <div className="absolute right-0 top-0 h-full w-full max-w-lg bg-white shadow-2xl p-6 overflow-y-auto">
+            <div className="flex items-center justify-between mb-4">
+              <h2 className="text-xl font-semibold">Current Alerts</h2>
+              <button className="px-2 py-1 rounded-md border hover:bg-gray-50" onClick={() => setShowAlerts(false)}>Close</button>
+            </div>
+            {!alarms?.alarms?.length ? (
+              <p className="text-sm opacity-70">No active alerts.</p>
+            ) : (
+              <ul className="space-y-3">
+                {alarms.alarms.map((a, i) => (
+                  <li key={i} className="border rounded-lg p-3">
+                    <div className="flex items-center justify-between">
+                      <div className="font-mono text-sm">{a.route}</div>
+                      <span className={`inline-flex items-center gap-1 px-2 py-0.5 rounded-full text-xs border
+                        ${a.severity === "critical" ? "bg-red-100 text-red-700 border-red-200"
+                                                   : "bg-amber-100 text-amber-800 border-amber-200"}`}>
+                        {a.kind === "error_rate" ? "errors" : "p95↑"} {a.severity}
+                      </span>
+                    </div>
+                    <div className="text-xs mt-2 opacity-80">
+                      {a.kind === "error_rate" ? (
+                        <>err% (1m): <b>{a.evidence.err_rate_1m}%</b> • samples: <b>{a.evidence.samples_1m}</b></>
+                      ) : (
+                        <>p95 prev3: <b>{a.evidence.p95_prev3_ms}ms</b> → last3: <b>{a.evidence.p95_last3_ms}ms</b> &nbsp;(+{a.evidence.regress_abs_ms}ms, {a.evidence.regress_pct}%)</>
+                      )}
+                    </div>
+                    <div className="flex gap-2 mt-3">
+                      <button
+                        className="px-2 py-1 rounded-md border hover:bg-gray-50"
+                        onClick={async () => {
+                          try {
+                            const res = await fetch(`/ops/sentry-link?route=${encodeURIComponent(a.route)}`, { cache: "no-store" });
+                            const j = await res.json();
+                            if (j?.url) return window.open(j.url, "_blank", "noopener,noreferrer");
+                            if (j?.missing) alert("Configure SENTRY_ORG_SLUG and SENTRY_PROJECT_SLUG secrets to enable Sentry deep links.");
+                          } catch { /* noop */ }
+                        }}
+                      >
+                        Sentry →
+                      </button>
+                    </div>
+                    <div className="text-xs mt-2 opacity-60">{a.hint}</div>
+                  </li>
+                ))}
+              </ul>
+            )}
+          </div>
+        </div>
+      )}
+
       <p className="text-xs opacity-70">
         Data sources: <code>/ops/metrics</code> (1m snapshot) & <code>/ops/metrics/trends</code> (5m, 10s buckets).
+        Alerts: <code>/ops/alarms</code> (error surges & p95 regressions).
       </p>
     </div>
   );
 }


Success check:

Start backend + frontend. Visit /velocity.

Generate traffic; cause a temporary 500 or add delay to one route.

Within ~10s:

Alerts bar shows Current Alerts: N.

Table shows Alerts badges on affected rows (warning/critical).

Clicking View Alerts opens the drawer with details and Sentry → buttons.

If Sentry slugs aren’t set, clicking Sentry → shows the “configure secrets” prompt; with slugs set, it opens filtered Discover.

Next: wait for user.