[Mode: Execution]

**Step:** Phase 9A — Add `ball_in_court_events` table + read API (`GET /api/tasks/:id/ball-history`).

**Why it matters:** This is the foundation for deeper “ball-in-court” analytics and UI—without it, we can’t time each handoff or visualize responsibility chains.

**Inputs needed:**

* DB access (Drizzle/SQL)
* Backend (Express) folder paths

**Command (paste exactly):**

**1) Migration (SQL) — create ledger**

```sql
-- drizzle/20251024_ball_in_court_events.sql
CREATE TABLE IF NOT EXISTS ball_in_court_events (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  task_id UUID NOT NULL REFERENCES tasks(id) ON DELETE CASCADE,
  from_role TEXT,
  to_role TEXT,
  from_user_email TEXT,
  to_user_email TEXT,
  reason TEXT,
  triggered_by_policy TEXT, -- e.g., 'handoff.estimation_to_procurement'
  acknowledged BOOLEAN DEFAULT false,
  acknowledged_by TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE INDEX IF NOT EXISTS ix_bice_task_time ON ball_in_court_events(task_id, created_at DESC);
```

**2) Backend route — read-only history**

```ts
// src/routes/ballHistory.ts
import { Router } from 'express';
import { db } from '../db';
import { ball_in_court_events } from '../db/schema';
import { requireAuth } from '../auth/requireAuth';

export const ballHistory = Router();

ballHistory.get('/tasks/:id/ball-history', requireAuth, async (req, res) => {
  const taskId = req.params.id;
  const rows = await db
    .select()
    .from(ball_in_court_events)
    .where(ball_in_court_events.task_id.eq(taskId))
    .orderBy(ball_in_court_events.created_at.desc());
  res.json({ task_id: taskId, events: rows });
});
```

**3) Wire route**

```ts
// src/server.ts
import { ballHistory } from './routes/ballHistory';
app.use('/api', ballHistory);
```

**4) Hook into existing handoff decision (write one line where you update owner/department)**

```ts
// after successful handoff apply:
await db.insert(ball_in_court_events).values({
  task_id: task.id,
  from_role: oldDept,
  to_role: newDept,
  from_user_email: prevOwnerEmail ?? null,
  to_user_email: newOwnerEmail ?? null,
  reason: 'handoff',
  triggered_by_policy: 'handoff.estimation_to_procurement'
});
```

**Success check:**

* Migration applies.
* `GET /api/tasks/{TASK_ID}/ball-history` returns `200` with an empty `events` array for old tasks.
* Trigger a handoff → endpoint returns one event with correct `from_role`/`to_role`. No console errors.

**Next:** wait for user.
