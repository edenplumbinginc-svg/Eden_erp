[Mode: Planning]

Step: Ship a small “Alpha UI Pack” so you can see and test the key things you asked for, without derailing flow:

1. Eden header with logo
2. Task Detail shell that **shows checklist**, **comments**, **attachments**, and **Ball-in-Court**
3. Comment box that can **upload photo/video** (hits your existing endpoints)
4. Guest-invite modal (stubbed to a backend route we’ll add after)
5. A floating “QA notes” drawer so you can log issues as you test

Why it matters: You get a visible product to review (functionality > polish) while we keep the backend stable.

Inputs needed: your existing `apps/coordination_ui` React app (already running), the API client (`src/api.js`).

Command: below in Execution we’ll add a single new **Task Detail** page with checklist, comments, attachments, Ball-in-Court, and an Eden header. This makes your concerns visible immediately.

Success check: You can click a project → open a task → see checklist, post a comment, attach a file, see Ball-in-Court, and the Eden header shows up.

Next: moves to Execution below.

[Mode: Execution]

Step: Add a minimal **Task Detail** page (with checklist, comments, attachments, ball-in-court) and an **Eden header**. Copy–paste the files below into `apps/coordination_ui` (adjust imports if your paths differ).

Why it matters: It surfaces the exact items you asked about (logo, checklist visibility, comments with file upload, ball-in-court, guest-invite stub) in one place so you can test and give feedback.

Inputs needed:

* `apps/coordination_ui/src/api.js` (existing Axios instance)
* React Router present (it is)
* Your backend endpoints: `/api/tasks/:id`, `/api/tasks/:id/comments`, `/api/tasks/:id/attachments`, upload init/complete routes you already have.

Command:

1. Create **EdenHeader** (logo + environment chip + dev auth indicator)

```jsx
// apps/coordination_ui/src/components/EdenHeader.jsx
import React from "react";

export default function EdenHeader() {
  return (
    <header className="w-full border-b bg-white">
      <div className="mx-auto max-w-6xl px-4 py-3 flex items-center justify-between">
        <div className="flex items-center gap-3">
          <img src="/logo-eden.svg" alt="EDEN" className="h-7 w-auto" />
          <span className="text-sm px-2 py-0.5 rounded bg-black text-white">Coordination • Alpha</span>
        </div>
        <div className="text-xs text-gray-500">
          <span className="hidden sm:inline">Dev headers on — switch roles via DevAuth</span>
        </div>
      </div>
    </header>
  );
}
```

2. Add a placeholder logo (replace later with your real asset)

```xml
<!-- apps/coordination_ui/public/logo-eden.svg -->
<svg xmlns="http://www.w3.org/2000/svg" width="108" height="28" viewBox="0 0 108 28" fill="none">
  <rect width="108" height="28" rx="6" fill="#111827"/>
  <text x="14" y="19" fill="white" font-family="system-ui, -apple-system, Segoe UI" font-size="14" font-weight="700">EDEN</text>
</svg>
```

3. Create **TaskDetail** page (checklist, comments+upload, attachments, ball-in-court, guest invite stub)

```jsx
// apps/coordination_ui/src/pages/TaskDetail.jsx
import React, { useMemo, useRef, useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { api } from "../api";

function Badge({ children, title }) {
  return <span title={title} className="text-xs px-2 py-0.5 rounded bg-gray-100 border">{children}</span>;
}

function BallInCourt({ task }) {
  const label = task?.ball_in_court ?? (task?.ballOwnerType ? `${task.ballOwnerType}:${task.ballOwnerId}` : "—");
  return (
    <div className="flex items-center gap-2">
      <span className="text-sm font-medium">Ball in Court:</span>
      <Badge title="Active owner separate from assignee">{label}</Badge>
    </div>
  );
}

function Checklist({ task }) {
  const items = Array.isArray(task?.checklist) ? task.checklist : [];
  return (
    <div className="space-y-2">
      <div className="font-semibold">Checklist</div>
      {items.length === 0 ? <div className="text-sm text-gray-500">No checklist yet.</div> :
        <ul className="space-y-2">
          {items.map((it, i) => (
            <li key={i} className="flex items-center gap-2">
              <input type="checkbox" checked={!!it.done} readOnly className="h-4 w-4" />
              <span className={it.done ? "line-through text-gray-500" : ""}>{it.title || `Item ${i+1}`}</span>
            </li>
          ))}
        </ul>
      }
    </div>
  );
}

function Comments({ taskId }) {
  const qc = useQueryClient();
  const { data } = useQuery({
    queryKey: ["comments", taskId],
    queryFn: async () => (await api.get(`/tasks/${taskId}/comments`)).data,
  });

  const [body, setBody] = useState("");
  const [file, setFile] = useState(null);

  const createComment = useMutation({
    mutationFn: async ({ body }) => (await api.post(`/tasks/${taskId}/comments`, { body })).data,
    onSuccess: () => { setBody(""); qc.invalidateQueries({ queryKey: ["comments", taskId] }); }
  });

  // Upload via your existing init/complete routes (simplified)
  const uploadRef = useRef();
  const uploadFile = useMutation({
    mutationFn: async (file) => {
      // 1) init
      const init = (await api.post(`/tasks/${taskId}/attachments/init`, {
        fileName: file.name, mime: file.type, sizeBytes: file.size
      })).data;
      // 2) PUT to signed URL (or your storage flow)
      await fetch(init.uploadUrl, { method: "PUT", body: file, headers: { "Content-Type": file.type } });
      // 3) complete
      return (await api.post(`/tasks/${taskId}/attachments/complete`, {
        taskId, bucket: init.bucket, path: init.path, mime: file.type, sizeBytes: file.size
      })).data;
    },
    onSuccess: () => { if (uploadRef.current) uploadRef.current.value = ""; qc.invalidateQueries({ queryKey: ["attachments", taskId] }); }
  });

  return (
    <div className="space-y-3">
      <div className="font-semibold">Comments</div>
      <div className="space-y-2">
        {Array.isArray(data) && data.length > 0 ? data.map(c => (
          <div key={c.id} className="p-2 border rounded">
            <div className="text-sm">{c.body}</div>
            <div className="text-xs text-gray-500">{new Date(c.created_at || c.createdAt).toLocaleString()}</div>
          </div>
        )) : <div className="text-sm text-gray-500">No comments yet.</div>}
      </div>
      <div className="flex gap-2">
        <input
          className="border rounded px-2 py-1 flex-1"
          placeholder="Write a comment…"
          value={body}
          onChange={e => setBody(e.target.value)}
        />
        <button className="px-3 py-1 rounded bg-black text-white"
          onClick={() => body.trim() && createComment.mutate({ body })}>
          Comment
        </button>
      </div>
      <div className="flex items-center gap-2">
        <input ref={uploadRef} type="file" accept="image/*,video/*,audio/*,application/pdf" onChange={e => setFile(e.target.files?.[0] ?? null)} />
        <button
          className="px-3 py-1 rounded border"
          onClick={() => file && uploadFile.mutate(file)}>
          Upload file
        </button>
        {uploadFile.isPending && <span className="text-xs">Uploading…</span>}
      </div>
    </div>
  );
}

function Attachments({ taskId }) {
  const { data } = useQuery({
    queryKey: ["attachments", taskId],
    queryFn: async () => (await api.get(`/tasks/${taskId}/attachments`)).data,
  });
  const files = data?.files || data || [];
  return (
    <div className="space-y-2">
      <div className="font-semibold">Attachments</div>
      {files.length === 0 ? <div className="text-sm text-gray-500">No files yet.</div> :
        <ul className="space-y-2">
          {files.map(f => (
            <li key={f.id} className="flex items-center justify-between border rounded p-2">
              <div>
                <div className="text-sm">{f.file_name || f.fileName || f.path}</div>
                <div className="text-xs text-gray-500">{f.mime} • {f.size_bytes || f.sizeBytes} bytes</div>
              </div>
              {/* Add delete later for owners/admin */}
            </li>
          ))}
        </ul>
      }
    </div>
  );
}

export default function TaskDetail({ taskId: propTaskId }) {
  const taskId = propTaskId ?? new URLSearchParams(window.location.search).get("taskId");
  const { data: task } = useQuery({
    queryKey: ["task", taskId],
    queryFn: async () => (await api.get(`/tasks/${taskId}`)).data,
    enabled: !!taskId
  });

  return (
    <div className="mx-auto max-w-6xl p-4 space-y-6">
      <div className="flex items-start justify-between">
        <div>
          <h2 className="text-xl font-semibold">{task?.title || "Task"}</h2>
          <div className="text-sm text-gray-600">{task?.description}</div>
        </div>
        <BallInCourt task={task} />
      </div>

      <div className="grid md:grid-cols-2 gap-6">
        <div className="space-y-6">
          <Checklist task={task} />
          <Comments taskId={taskId} />
        </div>
        <div className="space-y-6">
          <Attachments taskId={taskId} />

          {/* Guest Invite (stub) */}
          <div className="space-y-2">
            <div className="font-semibold">Guest Invite</div>
            <button
              className="px-3 py-1 rounded border"
              onClick={() => alert("Guest invite flow is stubbed. Backend route to mint an expiring link will be added next step.")}>
              Generate guest link (stub)
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
```

4. Mount **EdenHeader** and **TaskDetail** in your app

```jsx
// apps/coordination_ui/src/App.jsx
import React from "react";
import { useState } from "react";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import EdenHeader from "./components/EdenHeader";
import TaskDetail from "./pages/TaskDetail";
// import your existing router pages here…

const qc = new QueryClient();

export default function App() {
  const [taskId, setTaskId] = useState(null); // you can wire this via router params later
  return (
    <QueryClientProvider client={qc}>
      <div className="min-h-screen bg-gray-50">
        <EdenHeader />
        {/* render your existing pages; include TaskDetail when needed */}
        <TaskDetail taskId={taskId} />
      </div>
    </QueryClientProvider>
  );
}
```

Success check:

* The header shows the EDEN logo and Alpha chip.
* Visiting `?taskId=<UUID>` renders the Task Detail with checklist, comments, attachments.
* You can post a comment; it appears and audit logs record it.
* Selecting a file and clicking Upload completes successfully (init → PUT → complete).
* Ball-in-Court label is visible (uses current fields; we’ll refine to your exact columns next step).
* Guest Invite button appears and is stubbed (popup); we’ll wire backend minting next.

Next: wait for user

When you confirm this renders, I’ll do the **very next one-step task**: wire a backend route to **mint a time-boxed guest link** (RBAC-aware, audited, idempotent) and connect the UI button to it. Then we’ll tweak Ball-in-Court fields to your canonical columns and add a simple checklist editor.
