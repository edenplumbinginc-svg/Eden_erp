[Mode: Execution]

Step: Add a headless Navigation Smoke Test (Playwright) that walks every required_pages from docs/ui-contract.yaml and asserts each route renders a header or a valid UI state.

Why it matters: Even with 100% coverage, a route can break or redirect. This makes the contract executable and catches broken links before merge.

Inputs needed:

Node/npm

Vite scripts (build, preview) or equivalent

Existing docs/ui-contract.yaml

Command (copy–paste):

# Dev deps
npm i -D @playwright/test js-yaml
npx playwright install --with-deps

# Ensure Vite preview (build runs automatically before preview)
npm pkg set scripts.preview="vite preview --port 4173 --strictPort"
npm pkg set scripts.prepreview="vite build"

# Add the Playwright config
cat > playwright.config.cjs <<'CJS'
const { defineConfig, devices } = require('@playwright/test');

module.exports = defineConfig({
  testDir: 'tests',
  timeout: 30_000,
  retries: process.env.CI ? 1 : 0,
  reporter: [
    ['list'],
    ['html', { outputFolder: 'coverage/playwright-report', open: 'never' }],
  ],
  use: {
    baseURL: process.env.BASE_URL || 'http://localhost:4173',
    headless: true,
    trace: 'retain-on-failure',
    video: 'off',
    launchOptions: { args: ['--no-sandbox', '--disable-setuid-sandbox'] },
  },
  projects: [
    { name: 'chromium', use: { ...devices['Desktop Chrome'] } },
  ],
  webServer: process.env.PW_SKIP_WEBSERVER ? undefined : {
    command: 'npm run preview',
    url: 'http://localhost:4173',
    reuseExistingServer: !process.env.CI,
    timeout: 120_000,
  },
});
CJS

# Add the contract-driven smoke spec
mkdir -p tests coverage
cat > tests/smoke-nav.spec.cjs <<'CJS'
/* eslint-disable no-console */
const { test, expect } = require('@playwright/test');
const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');

function loadContractRoutes() {
  const specPath = path.join(process.cwd(), 'docs/ui-contract.yaml');
  const doc = yaml.load(fs.readFileSync(specPath, 'utf8'));
  const set = new Set();
  for (const res of doc.resources || []) {
    for (const route of res.required_pages || []) {
      // Replace every [param] with a safe test value
      const inflated = String(route).replace(/\[.*?\]/g, '123');
      set.add(inflated);
    }
  }
  return [...set];
}

const ROUTES = loadContractRoutes();

test.describe('contract routes', () => {
  for (const route of ROUTES) {
    test(`renders ${route}`, async ({ page }) => {
      const urlPath = route.startsWith('/') ? route : `/${route}`;
      await page.goto(urlPath, { waitUntil: 'domcontentloaded' });

      // Accept either a real header/heading or any explicit UI state.
      const selectors = [
        'header',
        'h1',
        'h2',
        '[role="heading"]',
        '[data-state="loading"]',
        '[data-state="error"]',
        '[data-state="unauthorized"]',
        '[data-state="empty"]',
        '[data-state="not_found"]'
      ].join(', ');

      // In auth-gated apps, redirects to /login are okay if a form or heading exists.
      const finalUrl = page.url();
      if (finalUrl.includes('/login')) {
        await expect(page.locator('form, [role="form"], h1, h2, [role="heading"]')
          .first()).toBeVisible();
        return;
      }

      // Otherwise, the route must render something meaningful.
      await expect(page.locator(selectors).first()).toBeVisible();
      console.log(`✓ Visited ${urlPath}`);
    });
  }
});
CJS

# Wire an npm script for CI and local runs
npm pkg set scripts.test:smoke="playwright test --project=chromium -g 'contract routes'"

# Optional: run against a dev server instead of preview (for Replit)
npm pkg set scripts.test:smoke:headed="PW_SKIP_WEBSERVER=1 BASE_URL=http://localhost:5173 playwright test --project=chromium -g 'contract routes' --headed"

# Run locally (builds, previews, then tests)
npm run test:smoke


CI (add to your workflow after npm ci):

- name: Install browsers
  run: npx playwright install --with-deps

- name: Smoke navigation (contract-driven)
  run: npm run test:smoke

# Optionally upload the HTML report
- name: Upload Playwright report
  if: always()
  uses: actions/upload-artifact@v4
  with:
    name: playwright-report
    path: coverage/playwright-report


Success check:

npm run test:smoke passes; the log shows each visited route, no failures.

In CI, a failing route blocks the merge; HTML report lives at coverage/playwright-report.

Next: wait for user