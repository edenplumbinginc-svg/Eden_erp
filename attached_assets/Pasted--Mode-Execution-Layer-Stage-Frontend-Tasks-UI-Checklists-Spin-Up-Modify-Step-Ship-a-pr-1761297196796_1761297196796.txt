[Mode: Execution]

Layer/Stage: Frontend → Tasks UI (Checklists) | Spin-Up → Modify

Step: Ship a production-ready <Checklist> component (list/add/toggle/reorder/delete) with permission gates and delta refresh, and mount it on your Task detail view.

Why it matters: You just finished the backend. This makes “Coordination = Checklists” real in the UI, captures done_at for timing, and requires zero page reloads.

Inputs needed:

Endpoints live:

GET /api/tasks/:taskId/checklist

POST /api/tasks/:taskId/checklist

POST /api/tasks/:taskId/checklist/:itemId/toggle

POST /api/tasks/:taskId/checklist/reorder

DELETE /api/tasks/:taskId/checklist/:itemId

Existing PermissionGate, supabase client, and your Task detail page (e.g. TaskDetailPage.jsx).

1) Client service (API helpers)

apps/coordination_ui/src/services/checklist.js

import { supabase } from "../lib/supabaseClient";

async function authFetch(url, init = {}) {
  const { data } = await supabase.auth.getSession();
  const jwt = data?.session?.access_token;
  if (!jwt) throw new Error("Not authenticated");
  const headers = { ...(init.headers || {}), Authorization: `Bearer ${jwt}`, "Content-Type": "application/json" };
  return fetch(url, { ...init, headers });
}

export async function listChecklist(taskId) {
  const r = await authFetch(`/api/tasks/${taskId}/checklist`);
  if (!r.ok) throw new Error("Failed to load checklist");
  return r.json(); // { items: [] }
}

export async function addChecklistItem(taskId, label, position = 0) {
  const r = await authFetch(`/api/tasks/${taskId}/checklist`, {
    method: "POST",
    body: JSON.stringify({ label, position }),
  });
  if (!r.ok) throw new Error("Create failed");
  return r.json(); // created item
}

export async function toggleChecklistItem(taskId, itemId) {
  const r = await authFetch(`/api/tasks/${taskId}/checklist/${itemId}/toggle`, { method: "POST" });
  if (!r.ok) throw new Error("Toggle failed");
  return r.json();
}

export async function reorderChecklist(taskId, orderIds) {
  const r = await authFetch(`/api/tasks/${taskId}/checklist/reorder`, {
    method: "POST",
    body: JSON.stringify({ order: orderIds }),
  });
  if (!r.ok && r.status !== 204) throw new Error("Reorder failed");
}

export async function deleteChecklistItem(taskId, itemId) {
  const r = await authFetch(`/api/tasks/${taskId}/checklist/${itemId}`, { method: "DELETE" });
  if (!r.ok && r.status !== 204) throw new Error("Delete failed");
}

2) Hook: delta-ish refresh loop for checklist

apps/coordination_ui/src/hooks/useChecklist.js

import { useEffect, useRef, useState } from "react";
import { listChecklist, addChecklistItem, toggleChecklistItem, reorderChecklist, deleteChecklistItem } from "../services/checklist";

export function useChecklist(taskId, { intervalMs = 20000 } = {}) {
  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const timerRef = useRef(null);

  async function load() {
    const data = await listChecklist(taskId);
    setItems(data.items || []);
  }

  useEffect(() => {
    let stop = false;
    (async () => {
      setLoading(true);
      try { await load(); } finally { setLoading(false); }
      const tick = async () => {
        try { await load(); } catch {}
        if (!stop) timerRef.current = setTimeout(tick, intervalMs);
      };
      timerRef.current = setTimeout(tick, intervalMs);
    })();
    return () => { stop = true; if (timerRef.current) clearTimeout(timerRef.current); };
  }, [taskId, intervalMs]);

  async function add(label) {
    const created = await addChecklistItem(taskId, label, items.length);
    setItems(prev => [...prev, created]);
  }
  async function toggle(id) {
    const updated = await toggleChecklistItem(taskId, id);
    setItems(prev => prev.map(i => i.id === id ? { ...i, ...updated } : i));
  }
  async function remove(id) {
    await deleteChecklistItem(taskId, id);
    setItems(prev => prev.filter(i => i.id !== id));
  }
  async function reorder(nextOrder) {
    const ids = nextOrder.map(i => i.id);
    await reorderChecklist(taskId, ids);
    setItems(nextOrder);
  }

  return { items, loading, add, toggle, remove, reorder, setItems };
}

3) Component: <Checklist taskId=... />

apps/coordination_ui/src/components/Checklist.jsx

import { useState } from "react";
import { useChecklist } from "../hooks/useChecklist";
import PermissionGate from "./PermissionGate";

export default function Checklist({ taskId }) {
  const { items, loading, add, toggle, remove, reorder, setItems } = useChecklist(taskId, { intervalMs: 20000 });
  const [label, setLabel] = useState("");

  // Basic drag handling (mouse only; can swap for dnd-kit later)
  function onDragStart(e, index) {
    e.dataTransfer.setData("text/plain", String(index));
  }
  function onDrop(e, index) {
    const from = Number(e.dataTransfer.getData("text/plain"));
    if (Number.isNaN(from)) return;
    const next = [...items];
    const [moved] = next.splice(from, 1);
    next.splice(index, 0, moved);
    setItems(next);
    reorder(next).catch(()=>{}); // optimistic
  }
  function onDragOver(e) { e.preventDefault(); }

  return (
    <div className="border rounded-md">
      <div className="px-3 py-2 border-b bg-slate-50 text-sm font-medium">Checklist</div>

      <div className="p-3 space-y-2">
        {loading && items.length === 0 ? (
          <div className="text-sm opacity-70">Loading checklist…</div>
        ) : (
          <ul className="space-y-1">
            {items.map((it, idx) => (
              <li key={it.id}
                  draggable
                  onDragStart={(e)=>onDragStart(e, idx)}
                  onDragOver={onDragOver}
                  onDrop={(e)=>onDrop(e, idx)}
                  className="flex items-center justify-between gap-3 px-2 py-1 rounded hover:bg-slate-50">
                <div className="flex items-center gap-2">
                  <PermissionGate perm="tasks.checklist.write">
                    <input
                      type="checkbox"
                      checked={!!it.is_done}
                      onChange={()=>toggle(it.id)}
                    />
                  </PermissionGate>
                  <span className={`text-sm ${it.is_done ? "line-through opacity-60" : ""}`}>
                    {it.label}
                  </span>
                </div>

                <div className="flex items-center gap-3">
                  {it.done_at && <span className="text-xs opacity-60" title={it.done_at}>done</span>}
                  <PermissionGate perm="tasks.checklist.delete">
                    <button className="text-xs border rounded px-2 py-1"
                            onClick={()=>remove(it.id)}>
                      Delete
                    </button>
                  </PermissionGate>
                </div>
              </li>
            ))}
          </ul>
        )}

        <PermissionGate perm="tasks.checklist.write">
          <form className="flex gap-2" onSubmit={(e)=>{ e.preventDefault(); if (!label.trim()) return; add(label.trim()).then(()=>setLabel("")); }}>
            <input
              className="flex-1 border rounded p-2 text-sm"
              placeholder="Add checklist item…"
              value={label}
              onChange={(e)=>setLabel(e.target.value)}
            />
            <button className="text-sm border rounded px-3 py-2">Add</button>
          </form>
        </PermissionGate>

        {/* Read-only hint */}
        <PermissionGate perm="tasks.checklist.write" invert>
          <div className="text-xs opacity-70">You have view-only access to this checklist.</div>
        </PermissionGate>
      </div>
    </div>
  );
}

4) Mount on Task Detail

apps/coordination_ui/src/pages/TaskDetailPage.jsx (or your actual detail view)

import Checklist from "../components/Checklist";

export default function TaskDetailPage({ task }) {
  // ensure 'task' or 'taskId' available in your page; adapt if using router params
  return (
    <div className="space-y-4">
      {/* existing task header/details here */}
      <Checklist taskId={task.id} />
    </div>
  );
}

Success check

Open a task detail page → Checklist box renders.

Viewer role: sees list; cannot toggle/add/delete (UI shows read-only hint).

Coordinator/Admin: can add items, toggle done/undone (timestamps update), delete, and drag to reorder.

Network: calls the 5 endpoints; audit log records task.checklist.* events.

After toggling, the item updates immediately (optimistic), and persists across refreshes.

Progress telemetry

Frontend → Tasks UI (Checklists): Spin-Up → Modify ✅ → Test → Stable

Backend → Tasks (Checklist API): Stable ✅

Integration → Delta/Realtime: Background refresh active (20s); upgrade to beacon-nudge is trivial if desired.

Next: wait for user.
When you confirm this renders and behaves as expected, I’ll bolt on micro-telemetry for timing/points (captures first-touch, completion latency per user) and outline the Performance Engine v1 (scores + badges) using the data already captured by done_at and the audit log.