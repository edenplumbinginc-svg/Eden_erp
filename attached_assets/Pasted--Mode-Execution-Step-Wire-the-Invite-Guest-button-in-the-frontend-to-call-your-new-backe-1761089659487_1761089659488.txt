[Mode: Execution]

Step: Wire the **“Invite Guest”** button in the frontend to call your new backend `/api/guest-links` endpoint and show a copyable link with a live countdown.

Why it matters: You can now invite outside collaborators safely and immediately test the full flow end-to-end (RBAC → audit log → usable link).

Inputs needed:

* Frontend: `apps/coordination_ui` is running
* Backend: `/api/guest-links` live (you just shipped it)
* A taskId to test (use one from your DB)

Command (copy–paste these exact edits):

1. Add an API helper

```js
// apps/coordination_ui/src/api.js
// …existing imports/config…
export async function createGuestLink({ scope, id, expiresIn = "7d" }) {
  const { data } = await api.post("/guest-links", { scope, id, expiresIn });
  return data; // { url, expiresAt }
}
```

2. Drop in a tiny Countdown component

```jsx
// apps/coordination_ui/src/components/Countdown.jsx
import { useEffect, useState } from "react";
export default function Countdown({ target }) {
  const [left, setLeft] = useState(() => new Date(target) - Date.now());
  useEffect(() => {
    const t = setInterval(() => setLeft(new Date(target) - Date.now()), 1000);
    return () => clearInterval(t);
  }, [target]);
  if (left <= 0) return <span className="text-red-600">expired</span>;
  const s = Math.floor(left / 1000);
  const d = Math.floor(s / 86400);
  const h = Math.floor((s % 86400) / 3600);
  const m = Math.floor((s % 3600) / 60);
  const sec = s % 60;
  return <span>{d ? `${d}d ` : ""}{h}h {m}m {sec}s</span>;
}
```

3. Wire the button in Task Detail
   Add UI state + handler + panel. Keep everything else intact.

```jsx
// apps/coordination_ui/src/pages/TaskDetail.jsx
import React, { /* … */ useState } from "react";
import { createGuestLink } from "../api";
import Countdown from "../components/Countdown";

// inside TaskDetail component, near top:
const [invite, setInvite] = useState(null);
const [inviteErr, setInviteErr] = useState(null);
const [inviting, setInviting] = useState(false);

// replace the existing Guest Invite stub section with this:
<div className="space-y-2">
  <div className="font-semibold">Guest Invite</div>
  <div className="flex items-center gap-2">
    <button
      className="px-3 py-1 rounded border"
      disabled={inviting}
      onClick={async () => {
        try {
          setInviting(true);
          setInviteErr(null);
          // scope “task”, id from current taskId; change to “project” when used on Project pages
          const res = await createGuestLink({ scope: "task", id: taskId, expiresIn: "7d" });
          setInvite(res); // {url, expiresAt}
        } catch (e) {
          setInviteErr(e?.response?.data?.error?.message || e.message);
          setInvite(null);
        } finally {
          setInviting(false);
        }
      }}
    >
      {inviting ? "Generating…" : "Generate guest link"}
    </button>
    {inviteErr && <span className="text-sm text-red-600">{inviteErr}</span>}
  </div>

  {invite && (
    <div className="rounded border p-3 bg-white">
      <div className="text-xs text-gray-500 mb-1">Expires in: <Countdown target={invite.expiresAt} /></div>
      <div className="flex items-center gap-2">
        <input
          className="border p-1 rounded w-full text-sm"
          readOnly
          value={invite.url}
          onFocus={(e)=>e.target.select()}
        />
        <button
          className="px-2 py-1 rounded bg-black text-white text-sm"
          onClick={() => navigator.clipboard.writeText(invite.url)}
        >
          Copy
        </button>
      </div>
    </div>
  )}
</div>
```

Success check:

* As **OPS/ADMIN** in DevAuthSwitcher, open `/task/<taskId>` → click **Generate guest link** → you see a URL and a live countdown; link is copyable.
* As **VIEWER**, the button shows a friendly error (403) and no link is created.
* Database: `SELECT * FROM guest_links ORDER BY created_at DESC LIMIT 1;` shows the new row.
* Audit log: latest `guest.invite` present in `audit_logs`.

Next: wait for user

When this is green, I’ll do the next single step: **Ball-in-court refinement** (add `ball_owner_type`, `ball_owner_id`, `ball_since` + auto-set on change + UI “X days” badge).
